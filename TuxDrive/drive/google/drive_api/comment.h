// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-04-08 17:16:44 UTC
//   on: 2016-04-28, 20:31:57 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v3)
// Generated from:
//   Version: v3
//   Revision: 22
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_DRIVE_API_COMMENT_H_
#define  GOOGLE_DRIVE_API_COMMENT_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/reply.h"
#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * A comment on a file.
 *
 * @ingroup DataObject
 */
class Comment : public client::JsonCppData {
 public:
  /**
   * The file content to which the comment refers, typically within the anchor
   * region. For a text file, for example, this would be the text at the
   * location of the comment.
   *
   * @ingroup DataObject
   */
  class CommentQuotedFileContent : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static CommentQuotedFileContent* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CommentQuotedFileContent(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit CommentQuotedFileContent(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~CommentQuotedFileContent();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::CommentQuotedFileContent</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::CommentQuotedFileContent");
    }

    /**
     * Determine if the '<code>mimeType</code>' attribute was set.
     *
     * @return true if the '<code>mimeType</code>' attribute was set.
     */
    bool has_mime_type() const {
      return Storage().isMember("mimeType");
    }

    /**
     * Clears the '<code>mimeType</code>' attribute.
     */
    void clear_mime_type() {
      MutableStorage()->removeMember("mimeType");
    }


    /**
     * Get the value of the '<code>mimeType</code>' attribute.
     */
    const StringPiece get_mime_type() const {
      const Json::Value& v = Storage("mimeType");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>mimeType</code>' attribute.
     *
     * The MIME type of the quoted content.
     *
     * @param[in] value The new value.
     */
    void set_mime_type(const StringPiece& value) {
      *MutableStorage("mimeType") = value.data();
    }

    /**
     * Determine if the '<code>value</code>' attribute was set.
     *
     * @return true if the '<code>value</code>' attribute was set.
     */
    bool has_value() const {
      return Storage().isMember("value");
    }

    /**
     * Clears the '<code>value</code>' attribute.
     */
    void clear_value() {
      MutableStorage()->removeMember("value");
    }


    /**
     * Get the value of the '<code>value</code>' attribute.
     */
    const StringPiece get_value() const {
      const Json::Value& v = Storage("value");
      if (v == Json::Value::null) return StringPiece("");
      return StringPiece(v.asCString());
    }

    /**
     * Change the '<code>value</code>' attribute.
     *
     * The quoted content itself. This is interpreted as plain text if set
     * through the API.
     *
     * @param[in] value The new value.
     */
    void set_value(const StringPiece& value) {
      *MutableStorage("value") = value.data();
    }

   private:
    void operator=(const CommentQuotedFileContent&);
  };  // CommentQuotedFileContent
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Comment* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Comment(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Comment(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Comment();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::Comment</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::Comment");
  }

  /**
   * Determine if the '<code>anchor</code>' attribute was set.
   *
   * @return true if the '<code>anchor</code>' attribute was set.
   */
  bool has_anchor() const {
    return Storage().isMember("anchor");
  }

  /**
   * Clears the '<code>anchor</code>' attribute.
   */
  void clear_anchor() {
    MutableStorage()->removeMember("anchor");
  }


  /**
   * Get the value of the '<code>anchor</code>' attribute.
   */
  const StringPiece get_anchor() const {
    const Json::Value& v = Storage("anchor");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>anchor</code>' attribute.
   *
   * A region of the document represented as a JSON string. See anchor
   * documentation for details on how to define and interpret anchor properties.
   *
   * @param[in] value The new value.
   */
  void set_anchor(const StringPiece& value) {
    *MutableStorage("anchor") = value.data();
  }

  /**
   * Determine if the '<code>author</code>' attribute was set.
   *
   * @return true if the '<code>author</code>' attribute was set.
   */
  bool has_author() const {
    return Storage().isMember("author");
  }

  /**
   * Clears the '<code>author</code>' attribute.
   */
  void clear_author() {
    MutableStorage()->removeMember("author");
  }


  /**
   * Get a reference to the value of the '<code>author</code>' attribute.
   */
  const User get_author() const;

  /**
   * Gets a reference to a mutable value of the '<code>author</code>' property.
   *
   * The user who created the comment.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_author();

  /**
   * Determine if the '<code>content</code>' attribute was set.
   *
   * @return true if the '<code>content</code>' attribute was set.
   */
  bool has_content() const {
    return Storage().isMember("content");
  }

  /**
   * Clears the '<code>content</code>' attribute.
   */
  void clear_content() {
    MutableStorage()->removeMember("content");
  }


  /**
   * Get the value of the '<code>content</code>' attribute.
   */
  const StringPiece get_content() const {
    const Json::Value& v = Storage("content");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>content</code>' attribute.
   *
   * The plain text content of the comment. This field is used for setting the
   * content, while htmlContent should be displayed.
   *
   * @param[in] value The new value.
   */
  void set_content(const StringPiece& value) {
    *MutableStorage("content") = value.data();
  }

  /**
   * Determine if the '<code>createdTime</code>' attribute was set.
   *
   * @return true if the '<code>createdTime</code>' attribute was set.
   */
  bool has_created_time() const {
    return Storage().isMember("createdTime");
  }

  /**
   * Clears the '<code>createdTime</code>' attribute.
   */
  void clear_created_time() {
    MutableStorage()->removeMember("createdTime");
  }


  /**
   * Get the value of the '<code>createdTime</code>' attribute.
   */
  client::DateTime get_created_time() const {
    const Json::Value& storage = Storage("createdTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>createdTime</code>' attribute.
   *
   * The time at which the comment was created (RFC 3339 date-time).
   *
   * @param[in] value The new value.
   */
  void set_created_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("createdTime"));
  }

  /**
   * Determine if the '<code>deleted</code>' attribute was set.
   *
   * @return true if the '<code>deleted</code>' attribute was set.
   */
  bool has_deleted() const {
    return Storage().isMember("deleted");
  }

  /**
   * Clears the '<code>deleted</code>' attribute.
   */
  void clear_deleted() {
    MutableStorage()->removeMember("deleted");
  }


  /**
   * Get the value of the '<code>deleted</code>' attribute.
   */
  bool get_deleted() const {
    const Json::Value& storage = Storage("deleted");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>deleted</code>' attribute.
   *
   * Whether the comment has been deleted. A deleted comment has no content.
   *
   * @param[in] value The new value.
   */
  void set_deleted(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("deleted"));
  }

  /**
   * Determine if the '<code>htmlContent</code>' attribute was set.
   *
   * @return true if the '<code>htmlContent</code>' attribute was set.
   */
  bool has_html_content() const {
    return Storage().isMember("htmlContent");
  }

  /**
   * Clears the '<code>htmlContent</code>' attribute.
   */
  void clear_html_content() {
    MutableStorage()->removeMember("htmlContent");
  }


  /**
   * Get the value of the '<code>htmlContent</code>' attribute.
   */
  const StringPiece get_html_content() const {
    const Json::Value& v = Storage("htmlContent");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>htmlContent</code>' attribute.
   *
   * The content of the comment with HTML formatting.
   *
   * @param[in] value The new value.
   */
  void set_html_content(const StringPiece& value) {
    *MutableStorage("htmlContent") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * The ID of the comment.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#comment.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>modifiedTime</code>' attribute was set.
   *
   * @return true if the '<code>modifiedTime</code>' attribute was set.
   */
  bool has_modified_time() const {
    return Storage().isMember("modifiedTime");
  }

  /**
   * Clears the '<code>modifiedTime</code>' attribute.
   */
  void clear_modified_time() {
    MutableStorage()->removeMember("modifiedTime");
  }


  /**
   * Get the value of the '<code>modifiedTime</code>' attribute.
   */
  client::DateTime get_modified_time() const {
    const Json::Value& storage = Storage("modifiedTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>modifiedTime</code>' attribute.
   *
   * The last time the comment or any of its replies was modified (RFC 3339
   * date-time).
   *
   * @param[in] value The new value.
   */
  void set_modified_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("modifiedTime"));
  }

  /**
   * Determine if the '<code>quotedFileContent</code>' attribute was set.
   *
   * @return true if the '<code>quotedFileContent</code>' attribute was set.
   */
  bool has_quoted_file_content() const {
    return Storage().isMember("quotedFileContent");
  }

  /**
   * Clears the '<code>quotedFileContent</code>' attribute.
   */
  void clear_quoted_file_content() {
    MutableStorage()->removeMember("quotedFileContent");
  }


  /**
   * Get a reference to the value of the '<code>quotedFileContent</code>'
   * attribute.
   */
  const CommentQuotedFileContent get_quoted_file_content() const {
     const Json::Value& storage = Storage("quotedFileContent");
    return client::JsonValueToCppValueHelper<CommentQuotedFileContent >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>quotedFileContent</code>'
   * property.
   *
   * The file content to which the comment refers, typically within the anchor
   * region. For a text file, for example, this would be the text at the
   * location of the comment.
   *
   * @return The result can be modified to change the attribute value.
   */
  CommentQuotedFileContent mutable_quotedFileContent() {
    Json::Value* storage = MutableStorage("quotedFileContent");
    return client::JsonValueToMutableCppValueHelper<CommentQuotedFileContent >(storage);
  }

  /**
   * Determine if the '<code>replies</code>' attribute was set.
   *
   * @return true if the '<code>replies</code>' attribute was set.
   */
  bool has_replies() const {
    return Storage().isMember("replies");
  }

  /**
   * Clears the '<code>replies</code>' attribute.
   */
  void clear_replies() {
    MutableStorage()->removeMember("replies");
  }


  /**
   * Get a reference to the value of the '<code>replies</code>' attribute.
   */
  const client::JsonCppArray<Reply > get_replies() const;

  /**
   * Gets a reference to a mutable value of the '<code>replies</code>' property.
   *
   * The full list of replies to the comment in chronological order.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<Reply > mutable_replies();

  /**
   * Determine if the '<code>resolved</code>' attribute was set.
   *
   * @return true if the '<code>resolved</code>' attribute was set.
   */
  bool has_resolved() const {
    return Storage().isMember("resolved");
  }

  /**
   * Clears the '<code>resolved</code>' attribute.
   */
  void clear_resolved() {
    MutableStorage()->removeMember("resolved");
  }


  /**
   * Get the value of the '<code>resolved</code>' attribute.
   */
  bool get_resolved() const {
    const Json::Value& storage = Storage("resolved");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>resolved</code>' attribute.
   *
   * Whether the comment has been resolved by one of its replies.
   *
   * @param[in] value The new value.
   */
  void set_resolved(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("resolved"));
  }

 private:
  void operator=(const Comment&);
};  // Comment
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_COMMENT_H_
