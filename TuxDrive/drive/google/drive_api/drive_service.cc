// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-04-08 17:16:44 UTC
//   on: 2016-04-28, 20:31:57 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/drive_api/drive_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"

#include "google/drive_api/about.h"
#include "google/drive_api/change_list.h"
#include "google/drive_api/channel.h"
#include "google/drive_api/comment.h"
#include "google/drive_api/comment_list.h"
#include "google/drive_api/file.h"
#include "google/drive_api/file_list.h"
#include "google/drive_api/generated_ids.h"
#include "google/drive_api/permission.h"
#include "google/drive_api/permission_list.h"
#include "google/drive_api/reply.h"
#include "google/drive_api/reply_list.h"
#include "google/drive_api/revision.h"
#include "google/drive_api/revision_list.h"
#include "google/drive_api/start_page_token.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_drive_api {
using namespace googleapis;
const char DriveService::googleapis_API_NAME[] = {"drive"};

const char DriveService::googleapis_API_VERSION[] = {"v3"};

const char DriveService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.4"};


const char DriveService::SCOPES::DRIVE[] = {"https://www.googleapis.com/auth/drive"};

const char DriveService::SCOPES::DRIVE_APPDATA[] = {"https://www.googleapis.com/auth/drive.appdata"};

const char DriveService::SCOPES::DRIVE_FILE[] = {"https://www.googleapis.com/auth/drive.file"};

const char DriveService::SCOPES::DRIVE_METADATA[] = {"https://www.googleapis.com/auth/drive.metadata"};

const char DriveService::SCOPES::DRIVE_METADATA_READONLY[] = {"https://www.googleapis.com/auth/drive.metadata.readonly"};

const char DriveService::SCOPES::DRIVE_PHOTOS_READONLY[] = {"https://www.googleapis.com/auth/drive.photos.readonly"};

const char DriveService::SCOPES::DRIVE_READONLY[] = {"https://www.googleapis.com/auth/drive.readonly"};

const char DriveService::SCOPES::DRIVE_SCRIPTS[] = {"https://www.googleapis.com/auth/drive.scripts"};
DriveServiceBaseRequest::DriveServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

DriveServiceBaseRequest::~DriveServiceBaseRequest() {
}

util::Status DriveServiceBaseRequest::AppendVariable(
    const StringPiece& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status DriveServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void DriveServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}



// Standard constructor.
AboutResource_GetMethod::AboutResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "about") {
}

// Standard destructor.
AboutResource_GetMethod::~AboutResource_GetMethod() {
}


// Standard constructor.
ChangesResource_GetStartPageTokenMethod::ChangesResource_GetStartPageTokenMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "changes/startPageToken") {
}

// Standard destructor.
ChangesResource_GetStartPageTokenMethod::~ChangesResource_GetStartPageTokenMethod() {
}


// Standard constructor.
ChangesResource_ListMethod::ChangesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& page_token)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "changes"),
      page_token_(page_token.as_string()),
      include_removed_(true),
      page_size_(100),
      restrict_to_my_drive_(false),
      spaces_("drive"),
      _have_include_removed_(false),
      _have_page_size_(false),
      _have_restrict_to_my_drive_(false),
      _have_spaces_(false) {
}

// Standard destructor.
ChangesResource_ListMethod::~ChangesResource_ListMethod() {
}

util::Status ChangesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  if (_have_include_removed_) {
    StrAppend(target, sep, "includeRemoved=",
              client::CppValueToEscapedUrlValue(
                include_removed_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  if (_have_restrict_to_my_drive_) {
    StrAppend(target, sep, "restrictToMyDrive=",
              client::CppValueToEscapedUrlValue(
                restrict_to_my_drive_));
    sep = "&";
  }
  if (_have_spaces_) {
    StrAppend(target, sep, "spaces=",
              client::CppValueToEscapedUrlValue(
                spaces_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChangesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChangesResource_WatchMethod::ChangesResource_WatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& page_token, const Channel& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "changes/watch"),
      page_token_(page_token.as_string()),
      include_removed_(true),
      page_size_(100),
      restrict_to_my_drive_(false),
      spaces_("drive"),
      _have_include_removed_(false),
      _have_page_size_(false),
      _have_restrict_to_my_drive_(false),
      _have_spaces_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ChangesResource_WatchMethod::~ChangesResource_WatchMethod() {
}

util::Status ChangesResource_WatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  if (_have_include_removed_) {
    StrAppend(target, sep, "includeRemoved=",
              client::CppValueToEscapedUrlValue(
                include_removed_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  if (_have_restrict_to_my_drive_) {
    StrAppend(target, sep, "restrictToMyDrive=",
              client::CppValueToEscapedUrlValue(
                restrict_to_my_drive_));
    sep = "&";
  }
  if (_have_spaces_) {
    StrAppend(target, sep, "spaces=",
              client::CppValueToEscapedUrlValue(
                spaces_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status ChangesResource_WatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
ChannelsResource_StopMethod::ChannelsResource_StopMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const Channel& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "channels/stop") {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
ChannelsResource_StopMethod::~ChannelsResource_StopMethod() {
}


// Standard constructor.
CommentsResource_CreateMethod::CommentsResource_CreateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const Comment& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "files/{fileId}/comments"),
      file_id_(file_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
CommentsResource_CreateMethod::~CommentsResource_CreateMethod() {
}


util::Status CommentsResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_DeleteMethod::CommentsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "files/{fileId}/comments/{commentId}"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()) {
}

// Standard destructor.
CommentsResource_DeleteMethod::~CommentsResource_DeleteMethod() {
}


util::Status CommentsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_GetMethod::CommentsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/comments/{commentId}"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()),
      include_deleted_(false),
      _have_include_deleted_(false) {
}

// Standard destructor.
CommentsResource_GetMethod::~CommentsResource_GetMethod() {
}

util::Status CommentsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_deleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                include_deleted_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CommentsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_ListMethod::CommentsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/comments"),
      file_id_(file_id.as_string()),
      include_deleted_(false),
      page_size_(20),
      _have_include_deleted_(false),
      _have_page_size_(false),
      _have_page_token_(false),
      _have_start_modified_time_(false) {
}

// Standard destructor.
CommentsResource_ListMethod::~CommentsResource_ListMethod() {
}

util::Status CommentsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_deleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                include_deleted_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_start_modified_time_) {
    StrAppend(target, sep, "startModifiedTime=",
              client::CppValueToEscapedUrlValue(
                start_modified_time_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status CommentsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
CommentsResource_UpdateMethod::CommentsResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const Comment& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "files/{fileId}/comments/{commentId}"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
CommentsResource_UpdateMethod::~CommentsResource_UpdateMethod() {
}


util::Status CommentsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_CopyMethod::FilesResource_CopyMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const File& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "files/{fileId}/copy"),
      file_id_(file_id.as_string()),
      ignore_default_visibility_(false),
      keep_revision_forever_(false),
      _have_ignore_default_visibility_(false),
      _have_keep_revision_forever_(false),
      _have_ocr_language_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
FilesResource_CopyMethod::~FilesResource_CopyMethod() {
}

util::Status FilesResource_CopyMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_ignore_default_visibility_) {
    StrAppend(target, sep, "ignoreDefaultVisibility=",
              client::CppValueToEscapedUrlValue(
                ignore_default_visibility_));
    sep = "&";
  }
  if (_have_keep_revision_forever_) {
    StrAppend(target, sep, "keepRevisionForever=",
              client::CppValueToEscapedUrlValue(
                keep_revision_forever_));
    sep = "&";
  }
  if (_have_ocr_language_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocr_language_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_CopyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
FilesResource_CreateMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/drive/v3/files", true);


// static
const client::MediaUploadSpec
FilesResource_CreateMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/drive/v3/files", true);



// Deprecated constructor did not take media upload arguments.
FilesResource_CreateMethod::FilesResource_CreateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "files"),
      ignore_default_visibility_(false),
      keep_revision_forever_(false),
      use_content_as_indexable_text_(false),
      _have_ignore_default_visibility_(false),
      _have_keep_revision_forever_(false),
      _have_ocr_language_(false),
      _have_use_content_as_indexable_text_(false) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "files")));
}
// Standard constructor.
FilesResource_CreateMethod::FilesResource_CreateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const File* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "files"),
      ignore_default_visibility_(false),
      keep_revision_forever_(false),
      use_content_as_indexable_text_(false),
      _have_ignore_default_visibility_(false),
      _have_keep_revision_forever_(false),
      _have_ocr_language_(false),
      _have_use_content_as_indexable_text_(false) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "files"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
FilesResource_CreateMethod::~FilesResource_CreateMethod() {
}

util::Status FilesResource_CreateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_ignore_default_visibility_) {
    StrAppend(target, sep, "ignoreDefaultVisibility=",
              client::CppValueToEscapedUrlValue(
                ignore_default_visibility_));
    sep = "&";
  }
  if (_have_keep_revision_forever_) {
    StrAppend(target, sep, "keepRevisionForever=",
              client::CppValueToEscapedUrlValue(
                keep_revision_forever_));
    sep = "&";
  }
  if (_have_ocr_language_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocr_language_));
    sep = "&";
  }
  if (_have_use_content_as_indexable_text_) {
    StrAppend(target, sep, "useContentAsIndexableText=",
              client::CppValueToEscapedUrlValue(
                use_content_as_indexable_text_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_DeleteMethod::FilesResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "files/{fileId}"),
      file_id_(file_id.as_string()) {
}

// Standard destructor.
FilesResource_DeleteMethod::~FilesResource_DeleteMethod() {
}


util::Status FilesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_EmptyTrashMethod::FilesResource_EmptyTrashMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "files/trash") {
}

// Standard destructor.
FilesResource_EmptyTrashMethod::~FilesResource_EmptyTrashMethod() {
}


// Standard constructor.
FilesResource_ExportMethod::FilesResource_ExportMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& mime_type)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/export"),
      file_id_(file_id.as_string()),
      mime_type_(mime_type.as_string()) {
}

// Standard destructor.
FilesResource_ExportMethod::~FilesResource_ExportMethod() {
}

util::Status FilesResource_ExportMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
    StrAppend(target, sep, "mimeType=",
              client::CppValueToEscapedUrlValue(
                mime_type_));
    sep = "&";
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_ExportMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_GenerateIdsMethod::FilesResource_GenerateIdsMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/generateIds"),
      count_(10),
      space_("drive"),
      _have_count_(false),
      _have_space_(false) {
}

// Standard destructor.
FilesResource_GenerateIdsMethod::~FilesResource_GenerateIdsMethod() {
}

util::Status FilesResource_GenerateIdsMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_count_) {
    StrAppend(target, sep, "count=",
              client::CppValueToEscapedUrlValue(
                count_));
    sep = "&";
  }
  if (_have_space_) {
    StrAppend(target, sep, "space=",
              client::CppValueToEscapedUrlValue(
                space_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_GenerateIdsMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_GetMethod::FilesResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}"),
      file_id_(file_id.as_string()),
      acknowledge_abuse_(false),
      _have_acknowledge_abuse_(false) {
}

// Standard destructor.
FilesResource_GetMethod::~FilesResource_GetMethod() {
}

util::Status FilesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_acknowledge_abuse_) {
    StrAppend(target, sep, "acknowledgeAbuse=",
              client::CppValueToEscapedUrlValue(
                acknowledge_abuse_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_ListMethod::FilesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files"),
      corpus_("user"),
      page_size_(100),
      spaces_("drive"),
      _have_corpus_(false),
      _have_order_by_(false),
      _have_page_size_(false),
      _have_page_token_(false),
      _have_q_(false),
      _have_spaces_(false) {
}

// Standard destructor.
FilesResource_ListMethod::~FilesResource_ListMethod() {
}

util::Status FilesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_corpus_) {
    StrAppend(target, sep, "corpus=",
              client::CppValueToEscapedUrlValue(
                corpus_));
    sep = "&";
  }
  if (_have_order_by_) {
    StrAppend(target, sep, "orderBy=",
              client::CppValueToEscapedUrlValue(
                order_by_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  if (_have_spaces_) {
    StrAppend(target, sep, "spaces=",
              client::CppValueToEscapedUrlValue(
                spaces_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
FilesResource_UpdateMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/drive/v3/files/{fileId}", true);


// static
const client::MediaUploadSpec
FilesResource_UpdateMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/drive/v3/files/{fileId}", true);



// Deprecated constructor did not take media upload arguments.
FilesResource_UpdateMethod::FilesResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id)
    : DriveServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PATCH,
      "files/{fileId}"),
      file_id_(file_id.as_string()),
      keep_revision_forever_(false),
      use_content_as_indexable_text_(false),
      _have_add_parents_(false),
      _have_keep_revision_forever_(false),
      _have_ocr_language_(false),
      _have_remove_parents_(false),
      _have_use_content_as_indexable_text_(false) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "files/{fileId}")));
}
// Standard constructor.
FilesResource_UpdateMethod::FilesResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const File* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "files/{fileId}"),
      file_id_(file_id.as_string()),
      keep_revision_forever_(false),
      use_content_as_indexable_text_(false),
      _have_add_parents_(false),
      _have_keep_revision_forever_(false),
      _have_ocr_language_(false),
      _have_remove_parents_(false),
      _have_use_content_as_indexable_text_(false) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "files/{fileId}"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
FilesResource_UpdateMethod::~FilesResource_UpdateMethod() {
}

util::Status FilesResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_add_parents_) {
    StrAppend(target, sep, "addParents=",
              client::CppValueToEscapedUrlValue(
                add_parents_));
    sep = "&";
  }
  if (_have_keep_revision_forever_) {
    StrAppend(target, sep, "keepRevisionForever=",
              client::CppValueToEscapedUrlValue(
                keep_revision_forever_));
    sep = "&";
  }
  if (_have_ocr_language_) {
    StrAppend(target, sep, "ocrLanguage=",
              client::CppValueToEscapedUrlValue(
                ocr_language_));
    sep = "&";
  }
  if (_have_remove_parents_) {
    StrAppend(target, sep, "removeParents=",
              client::CppValueToEscapedUrlValue(
                remove_parents_));
    sep = "&";
  }
  if (_have_use_content_as_indexable_text_) {
    StrAppend(target, sep, "useContentAsIndexableText=",
              client::CppValueToEscapedUrlValue(
                use_content_as_indexable_text_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
FilesResource_WatchMethod::FilesResource_WatchMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const Channel& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "files/{fileId}/watch"),
      file_id_(file_id.as_string()),
      acknowledge_abuse_(false),
      _have_acknowledge_abuse_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
FilesResource_WatchMethod::~FilesResource_WatchMethod() {
}

util::Status FilesResource_WatchMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_acknowledge_abuse_) {
    StrAppend(target, sep, "acknowledgeAbuse=",
              client::CppValueToEscapedUrlValue(
                acknowledge_abuse_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status FilesResource_WatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_CreateMethod::PermissionsResource_CreateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const Permission& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "files/{fileId}/permissions"),
      file_id_(file_id.as_string()),
      transfer_ownership_(false),
      _have_email_message_(false),
      _have_send_notification_email_(false),
      _have_transfer_ownership_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
PermissionsResource_CreateMethod::~PermissionsResource_CreateMethod() {
}

util::Status PermissionsResource_CreateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_email_message_) {
    StrAppend(target, sep, "emailMessage=",
              client::CppValueToEscapedUrlValue(
                email_message_));
    sep = "&";
  }
  if (_have_send_notification_email_) {
    StrAppend(target, sep, "sendNotificationEmail=",
              client::CppValueToEscapedUrlValue(
                send_notification_email_));
    sep = "&";
  }
  if (_have_transfer_ownership_) {
    StrAppend(target, sep, "transferOwnership=",
              client::CppValueToEscapedUrlValue(
                transfer_ownership_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PermissionsResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_DeleteMethod::PermissionsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& permission_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "files/{fileId}/permissions/{permissionId}"),
      file_id_(file_id.as_string()),
      permission_id_(permission_id.as_string()) {
}

// Standard destructor.
PermissionsResource_DeleteMethod::~PermissionsResource_DeleteMethod() {
}


util::Status PermissionsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    client::UriTemplate::AppendValue(
        permission_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_GetMethod::PermissionsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& permission_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/permissions/{permissionId}"),
      file_id_(file_id.as_string()),
      permission_id_(permission_id.as_string()) {
}

// Standard destructor.
PermissionsResource_GetMethod::~PermissionsResource_GetMethod() {
}


util::Status PermissionsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    client::UriTemplate::AppendValue(
        permission_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_ListMethod::PermissionsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/permissions"),
      file_id_(file_id.as_string()) {
}

// Standard destructor.
PermissionsResource_ListMethod::~PermissionsResource_ListMethod() {
}


util::Status PermissionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
PermissionsResource_UpdateMethod::PermissionsResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& permission_id, const Permission& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "files/{fileId}/permissions/{permissionId}"),
      file_id_(file_id.as_string()),
      permission_id_(permission_id.as_string()),
      transfer_ownership_(false),
      _have_transfer_ownership_(false) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
PermissionsResource_UpdateMethod::~PermissionsResource_UpdateMethod() {
}

util::Status PermissionsResource_UpdateMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_transfer_ownership_) {
    StrAppend(target, sep, "transferOwnership=",
              client::CppValueToEscapedUrlValue(
                transfer_ownership_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status PermissionsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "permissionId") {
    client::UriTemplate::AppendValue(
        permission_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_CreateMethod::RepliesResource_CreateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const Reply& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "files/{fileId}/comments/{commentId}/replies"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RepliesResource_CreateMethod::~RepliesResource_CreateMethod() {
}


util::Status RepliesResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_DeleteMethod::RepliesResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const StringPiece& reply_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "files/{fileId}/comments/{commentId}/replies/{replyId}"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()),
      reply_id_(reply_id.as_string()) {
}

// Standard destructor.
RepliesResource_DeleteMethod::~RepliesResource_DeleteMethod() {
}


util::Status RepliesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    client::UriTemplate::AppendValue(
        reply_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_GetMethod::RepliesResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const StringPiece& reply_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/comments/{commentId}/replies/{replyId}"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()),
      reply_id_(reply_id.as_string()),
      include_deleted_(false),
      _have_include_deleted_(false) {
}

// Standard destructor.
RepliesResource_GetMethod::~RepliesResource_GetMethod() {
}

util::Status RepliesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_deleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                include_deleted_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RepliesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    client::UriTemplate::AppendValue(
        reply_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_ListMethod::RepliesResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/comments/{commentId}/replies"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()),
      include_deleted_(false),
      page_size_(20),
      _have_include_deleted_(false),
      _have_page_size_(false),
      _have_page_token_(false) {
}

// Standard destructor.
RepliesResource_ListMethod::~RepliesResource_ListMethod() {
}

util::Status RepliesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_deleted_) {
    StrAppend(target, sep, "includeDeleted=",
              client::CppValueToEscapedUrlValue(
                include_deleted_));
    sep = "&";
  }
  if (_have_page_size_) {
    StrAppend(target, sep, "pageSize=",
              client::CppValueToEscapedUrlValue(
                page_size_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RepliesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RepliesResource_UpdateMethod::RepliesResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const StringPiece& reply_id, const Reply& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "files/{fileId}/comments/{commentId}/replies/{replyId}"),
      file_id_(file_id.as_string()),
      comment_id_(comment_id.as_string()),
      reply_id_(reply_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RepliesResource_UpdateMethod::~RepliesResource_UpdateMethod() {
}


util::Status RepliesResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "commentId") {
    client::UriTemplate::AppendValue(
        comment_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "replyId") {
    client::UriTemplate::AppendValue(
        reply_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_DeleteMethod::RevisionsResource_DeleteMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& revision_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "files/{fileId}/revisions/{revisionId}"),
      file_id_(file_id.as_string()),
      revision_id_(revision_id.as_string()) {
}

// Standard destructor.
RevisionsResource_DeleteMethod::~RevisionsResource_DeleteMethod() {
}


util::Status RevisionsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    client::UriTemplate::AppendValue(
        revision_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_GetMethod::RevisionsResource_GetMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& revision_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/revisions/{revisionId}"),
      file_id_(file_id.as_string()),
      revision_id_(revision_id.as_string()),
      acknowledge_abuse_(false),
      _have_acknowledge_abuse_(false) {
}

// Standard destructor.
RevisionsResource_GetMethod::~RevisionsResource_GetMethod() {
}

util::Status RevisionsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_acknowledge_abuse_) {
    StrAppend(target, sep, "acknowledgeAbuse=",
              client::CppValueToEscapedUrlValue(
                acknowledge_abuse_));
    sep = "&";
  }
  return DriveServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status RevisionsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    client::UriTemplate::AppendValue(
        revision_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_ListMethod::RevisionsResource_ListMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "files/{fileId}/revisions"),
      file_id_(file_id.as_string()) {
}

// Standard destructor.
RevisionsResource_ListMethod::~RevisionsResource_ListMethod() {
}


util::Status RevisionsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
RevisionsResource_UpdateMethod::RevisionsResource_UpdateMethod(
    const DriveService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& revision_id, const Revision& __request_content__)
    : DriveServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "files/{fileId}/revisions/{revisionId}"),
      file_id_(file_id.as_string()),
      revision_id_(revision_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
RevisionsResource_UpdateMethod::~RevisionsResource_UpdateMethod() {
}


util::Status RevisionsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "fileId") {
    client::UriTemplate::AppendValue(
        file_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "revisionId") {
    client::UriTemplate::AppendValue(
        revision_id_, config, target);
    return client::StatusOk();
  }
  return DriveServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



DriveService::DriveService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "drive/v3/", transport), about_(this), changes_(this), channels_(this), comments_(this), files_(this), permissions_(this), replies_(this), revisions_(this) {
}

DriveService::~DriveService() {
}


DriveService::AboutResource::AboutResource(DriveService* service)
  : service_(service) {
}



AboutResource_GetMethod* DriveService::AboutResource::NewGetMethod(client::AuthorizationCredential* _credential_) const {
  return new AboutResource_GetMethod(service_, _credential_);
}

DriveService::ChangesResource::ChangesResource(DriveService* service)
  : service_(service) {
}



ChangesResource_GetStartPageTokenMethod* DriveService::ChangesResource::NewGetStartPageTokenMethod(client::AuthorizationCredential* _credential_) const {
  return new ChangesResource_GetStartPageTokenMethod(service_, _credential_);
}


ChangesResource_ListMethod* DriveService::ChangesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& page_token) const {
  return new ChangesResource_ListMethod(service_, _credential_, page_token);
}


ChangesResource_WatchMethod* DriveService::ChangesResource::NewWatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& page_token, const Channel& __request_content__) const {
  return new ChangesResource_WatchMethod(service_, _credential_, page_token, __request_content__);
}

DriveService::ChannelsResource::ChannelsResource(DriveService* service)
  : service_(service) {
}



ChannelsResource_StopMethod* DriveService::ChannelsResource::NewStopMethod(client::AuthorizationCredential* _credential_, const Channel& __request_content__) const {
  return new ChannelsResource_StopMethod(service_, _credential_, __request_content__);
}

DriveService::CommentsResource::CommentsResource(DriveService* service)
  : service_(service) {
}



CommentsResource_CreateMethod* DriveService::CommentsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const Comment& __request_content__) const {
  return new CommentsResource_CreateMethod(service_, _credential_, file_id, __request_content__);
}


CommentsResource_DeleteMethod* DriveService::CommentsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id) const {
  return new CommentsResource_DeleteMethod(service_, _credential_, file_id, comment_id);
}


CommentsResource_GetMethod* DriveService::CommentsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id) const {
  return new CommentsResource_GetMethod(service_, _credential_, file_id, comment_id);
}


CommentsResource_ListMethod* DriveService::CommentsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new CommentsResource_ListMethod(service_, _credential_, file_id);
}


CommentsResource_ListMethodPager* DriveService::CommentsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new client::EncapsulatedServiceRequestPager<CommentsResource_ListMethod, CommentList>(new CommentsResource_ListMethod(service_, _credential_, file_id));
}


CommentsResource_UpdateMethod* DriveService::CommentsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const Comment& __request_content__) const {
  return new CommentsResource_UpdateMethod(service_, _credential_, file_id, comment_id, __request_content__);
}

DriveService::FilesResource::FilesResource(DriveService* service)
  : service_(service) {
}



FilesResource_CopyMethod* DriveService::FilesResource::NewCopyMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const File& __request_content__) const {
  return new FilesResource_CopyMethod(service_, _credential_, file_id, __request_content__);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
FilesResource_CreateMethod* DriveService::FilesResource::NewCreateMethod(client::AuthorizationCredential* _credential_) const {
  return new FilesResource_CreateMethod(service_, _credential_);
}

FilesResource_CreateMethod* DriveService::FilesResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const File* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new FilesResource_CreateMethod(service_, _credential_, _metadata_, _media_content_type_, _media_content_reader_);
}


FilesResource_DeleteMethod* DriveService::FilesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new FilesResource_DeleteMethod(service_, _credential_, file_id);
}


FilesResource_EmptyTrashMethod* DriveService::FilesResource::NewEmptyTrashMethod(client::AuthorizationCredential* _credential_) const {
  return new FilesResource_EmptyTrashMethod(service_, _credential_);
}


FilesResource_ExportMethod* DriveService::FilesResource::NewExportMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& mime_type) const {
  return new FilesResource_ExportMethod(service_, _credential_, file_id, mime_type);
}


FilesResource_GenerateIdsMethod* DriveService::FilesResource::NewGenerateIdsMethod(client::AuthorizationCredential* _credential_) const {
  return new FilesResource_GenerateIdsMethod(service_, _credential_);
}


FilesResource_GetMethod* DriveService::FilesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new FilesResource_GetMethod(service_, _credential_, file_id);
}


FilesResource_ListMethod* DriveService::FilesResource::NewListMethod(client::AuthorizationCredential* _credential_) const {
  return new FilesResource_ListMethod(service_, _credential_);
}


FilesResource_ListMethodPager* DriveService::FilesResource::NewListMethodPager(client::AuthorizationCredential* _credential_) const {
  return new client::EncapsulatedServiceRequestPager<FilesResource_ListMethod, FileList>(new FilesResource_ListMethod(service_, _credential_));
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
FilesResource_UpdateMethod* DriveService::FilesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new FilesResource_UpdateMethod(service_, _credential_, file_id);
}

FilesResource_UpdateMethod* DriveService::FilesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const File* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new FilesResource_UpdateMethod(service_, _credential_, file_id, _metadata_, _media_content_type_, _media_content_reader_);
}


FilesResource_WatchMethod* DriveService::FilesResource::NewWatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const Channel& __request_content__) const {
  return new FilesResource_WatchMethod(service_, _credential_, file_id, __request_content__);
}

DriveService::PermissionsResource::PermissionsResource(DriveService* service)
  : service_(service) {
}



PermissionsResource_CreateMethod* DriveService::PermissionsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const Permission& __request_content__) const {
  return new PermissionsResource_CreateMethod(service_, _credential_, file_id, __request_content__);
}


PermissionsResource_DeleteMethod* DriveService::PermissionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& permission_id) const {
  return new PermissionsResource_DeleteMethod(service_, _credential_, file_id, permission_id);
}


PermissionsResource_GetMethod* DriveService::PermissionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& permission_id) const {
  return new PermissionsResource_GetMethod(service_, _credential_, file_id, permission_id);
}


PermissionsResource_ListMethod* DriveService::PermissionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new PermissionsResource_ListMethod(service_, _credential_, file_id);
}


PermissionsResource_UpdateMethod* DriveService::PermissionsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& permission_id, const Permission& __request_content__) const {
  return new PermissionsResource_UpdateMethod(service_, _credential_, file_id, permission_id, __request_content__);
}

DriveService::RepliesResource::RepliesResource(DriveService* service)
  : service_(service) {
}



RepliesResource_CreateMethod* DriveService::RepliesResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const Reply& __request_content__) const {
  return new RepliesResource_CreateMethod(service_, _credential_, file_id, comment_id, __request_content__);
}


RepliesResource_DeleteMethod* DriveService::RepliesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const StringPiece& reply_id) const {
  return new RepliesResource_DeleteMethod(service_, _credential_, file_id, comment_id, reply_id);
}


RepliesResource_GetMethod* DriveService::RepliesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const StringPiece& reply_id) const {
  return new RepliesResource_GetMethod(service_, _credential_, file_id, comment_id, reply_id);
}


RepliesResource_ListMethod* DriveService::RepliesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id) const {
  return new RepliesResource_ListMethod(service_, _credential_, file_id, comment_id);
}


RepliesResource_ListMethodPager* DriveService::RepliesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id) const {
  return new client::EncapsulatedServiceRequestPager<RepliesResource_ListMethod, ReplyList>(new RepliesResource_ListMethod(service_, _credential_, file_id, comment_id));
}


RepliesResource_UpdateMethod* DriveService::RepliesResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& comment_id, const StringPiece& reply_id, const Reply& __request_content__) const {
  return new RepliesResource_UpdateMethod(service_, _credential_, file_id, comment_id, reply_id, __request_content__);
}

DriveService::RevisionsResource::RevisionsResource(DriveService* service)
  : service_(service) {
}



RevisionsResource_DeleteMethod* DriveService::RevisionsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& revision_id) const {
  return new RevisionsResource_DeleteMethod(service_, _credential_, file_id, revision_id);
}


RevisionsResource_GetMethod* DriveService::RevisionsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& revision_id) const {
  return new RevisionsResource_GetMethod(service_, _credential_, file_id, revision_id);
}


RevisionsResource_ListMethod* DriveService::RevisionsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id) const {
  return new RevisionsResource_ListMethod(service_, _credential_, file_id);
}


RevisionsResource_UpdateMethod* DriveService::RevisionsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& file_id, const StringPiece& revision_id, const Revision& __request_content__) const {
  return new RevisionsResource_UpdateMethod(service_, _credential_, file_id, revision_id, __request_content__);
}
}  // namespace google_drive_api
