// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-04-08 17:16:44 UTC
//   on: 2016-04-28, 20:31:57 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v3)
// Generated from:
//   Version: v3
//   Revision: 22
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_DRIVE_API_REPLY_H_
#define  GOOGLE_DRIVE_API_REPLY_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * A reply to a comment on a file.
 *
 * @ingroup DataObject
 */
class Reply : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Reply* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Reply(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Reply(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Reply();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::Reply</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::Reply");
  }

  /**
   * Determine if the '<code>action</code>' attribute was set.
   *
   * @return true if the '<code>action</code>' attribute was set.
   */
  bool has_action() const {
    return Storage().isMember("action");
  }

  /**
   * Clears the '<code>action</code>' attribute.
   */
  void clear_action() {
    MutableStorage()->removeMember("action");
  }


  /**
   * Get the value of the '<code>action</code>' attribute.
   */
  const StringPiece get_action() const {
    const Json::Value& v = Storage("action");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>action</code>' attribute.
   *
   * The action the reply performed to the parent comment. Valid values are:
   * - resolve
   * - reopen.
   *
   * @param[in] value The new value.
   */
  void set_action(const StringPiece& value) {
    *MutableStorage("action") = value.data();
  }

  /**
   * Determine if the '<code>author</code>' attribute was set.
   *
   * @return true if the '<code>author</code>' attribute was set.
   */
  bool has_author() const {
    return Storage().isMember("author");
  }

  /**
   * Clears the '<code>author</code>' attribute.
   */
  void clear_author() {
    MutableStorage()->removeMember("author");
  }


  /**
   * Get a reference to the value of the '<code>author</code>' attribute.
   */
  const User get_author() const;

  /**
   * Gets a reference to a mutable value of the '<code>author</code>' property.
   *
   * The user who created the reply.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_author();

  /**
   * Determine if the '<code>content</code>' attribute was set.
   *
   * @return true if the '<code>content</code>' attribute was set.
   */
  bool has_content() const {
    return Storage().isMember("content");
  }

  /**
   * Clears the '<code>content</code>' attribute.
   */
  void clear_content() {
    MutableStorage()->removeMember("content");
  }


  /**
   * Get the value of the '<code>content</code>' attribute.
   */
  const StringPiece get_content() const {
    const Json::Value& v = Storage("content");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>content</code>' attribute.
   *
   * The plain text content of the reply. This field is used for setting the
   * content, while htmlContent should be displayed. This is required on creates
   * if no action is specified.
   *
   * @param[in] value The new value.
   */
  void set_content(const StringPiece& value) {
    *MutableStorage("content") = value.data();
  }

  /**
   * Determine if the '<code>createdTime</code>' attribute was set.
   *
   * @return true if the '<code>createdTime</code>' attribute was set.
   */
  bool has_created_time() const {
    return Storage().isMember("createdTime");
  }

  /**
   * Clears the '<code>createdTime</code>' attribute.
   */
  void clear_created_time() {
    MutableStorage()->removeMember("createdTime");
  }


  /**
   * Get the value of the '<code>createdTime</code>' attribute.
   */
  client::DateTime get_created_time() const {
    const Json::Value& storage = Storage("createdTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>createdTime</code>' attribute.
   *
   * The time at which the reply was created (RFC 3339 date-time).
   *
   * @param[in] value The new value.
   */
  void set_created_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("createdTime"));
  }

  /**
   * Determine if the '<code>deleted</code>' attribute was set.
   *
   * @return true if the '<code>deleted</code>' attribute was set.
   */
  bool has_deleted() const {
    return Storage().isMember("deleted");
  }

  /**
   * Clears the '<code>deleted</code>' attribute.
   */
  void clear_deleted() {
    MutableStorage()->removeMember("deleted");
  }


  /**
   * Get the value of the '<code>deleted</code>' attribute.
   */
  bool get_deleted() const {
    const Json::Value& storage = Storage("deleted");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>deleted</code>' attribute.
   *
   * Whether the reply has been deleted. A deleted reply has no content.
   *
   * @param[in] value The new value.
   */
  void set_deleted(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("deleted"));
  }

  /**
   * Determine if the '<code>htmlContent</code>' attribute was set.
   *
   * @return true if the '<code>htmlContent</code>' attribute was set.
   */
  bool has_html_content() const {
    return Storage().isMember("htmlContent");
  }

  /**
   * Clears the '<code>htmlContent</code>' attribute.
   */
  void clear_html_content() {
    MutableStorage()->removeMember("htmlContent");
  }


  /**
   * Get the value of the '<code>htmlContent</code>' attribute.
   */
  const StringPiece get_html_content() const {
    const Json::Value& v = Storage("htmlContent");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>htmlContent</code>' attribute.
   *
   * The content of the reply with HTML formatting.
   *
   * @param[in] value The new value.
   */
  void set_html_content(const StringPiece& value) {
    *MutableStorage("htmlContent") = value.data();
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * The ID of the reply.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#reply.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>modifiedTime</code>' attribute was set.
   *
   * @return true if the '<code>modifiedTime</code>' attribute was set.
   */
  bool has_modified_time() const {
    return Storage().isMember("modifiedTime");
  }

  /**
   * Clears the '<code>modifiedTime</code>' attribute.
   */
  void clear_modified_time() {
    MutableStorage()->removeMember("modifiedTime");
  }


  /**
   * Get the value of the '<code>modifiedTime</code>' attribute.
   */
  client::DateTime get_modified_time() const {
    const Json::Value& storage = Storage("modifiedTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>modifiedTime</code>' attribute.
   *
   * The last time the reply was modified (RFC 3339 date-time).
   *
   * @param[in] value The new value.
   */
  void set_modified_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("modifiedTime"));
  }

 private:
  void operator=(const Reply&);
};  // Reply
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_REPLY_H_
