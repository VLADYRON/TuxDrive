// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-04-08 17:16:44 UTC
//   on: 2016-04-28, 20:31:57 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v3)
// Generated from:
//   Version: v3
//   Revision: 22
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_DRIVE_API_ABOUT_H_
#define  GOOGLE_DRIVE_API_ABOUT_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * Information about the user, the user's Drive, and system capabilities.
 *
 * @ingroup DataObject
 */
class About : public client::JsonCppData {
 public:
  /**
   * The user's storage quota limits and usage. All fields are measured in
   * bytes.
   *
   * @ingroup DataObject
   */
  class AboutStorageQuota : public client::JsonCppData {
   public:
    /**
     * Creates a new default instance.
     *
     * @return Ownership is passed back to the caller.
     */
    static AboutStorageQuota* New();

    /**
     * Standard constructor for an immutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutStorageQuota(const Json::Value& storage);

    /**
     * Standard constructor for a mutable data object instance.
     *
     * @param[in] storage  The underlying data storage for this instance.
     */
    explicit AboutStorageQuota(Json::Value* storage);

    /**
     * Standard destructor.
     */
    virtual ~AboutStorageQuota();

    /**
     * Returns a string denoting the type of this data object.
     *
     * @return <code>google_drive_api::AboutStorageQuota</code>
     */
    const StringPiece GetTypeName() const {
      return StringPiece("google_drive_api::AboutStorageQuota");
    }

    /**
     * Determine if the '<code>limit</code>' attribute was set.
     *
     * @return true if the '<code>limit</code>' attribute was set.
     */
    bool has_limit() const {
      return Storage().isMember("limit");
    }

    /**
     * Clears the '<code>limit</code>' attribute.
     */
    void clear_limit() {
      MutableStorage()->removeMember("limit");
    }


    /**
     * Get the value of the '<code>limit</code>' attribute.
     */
    int64 get_limit() const {
      const Json::Value& storage = Storage("limit");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>limit</code>' attribute.
     *
     * The usage limit, if applicable. This will not be present if the user has
     * unlimited storage.
     *
     * @param[in] value The new value.
     */
    void set_limit(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("limit"));
    }

    /**
     * Determine if the '<code>usage</code>' attribute was set.
     *
     * @return true if the '<code>usage</code>' attribute was set.
     */
    bool has_usage() const {
      return Storage().isMember("usage");
    }

    /**
     * Clears the '<code>usage</code>' attribute.
     */
    void clear_usage() {
      MutableStorage()->removeMember("usage");
    }


    /**
     * Get the value of the '<code>usage</code>' attribute.
     */
    int64 get_usage() const {
      const Json::Value& storage = Storage("usage");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>usage</code>' attribute.
     *
     * The total usage across all services.
     *
     * @param[in] value The new value.
     */
    void set_usage(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("usage"));
    }

    /**
     * Determine if the '<code>usageInDrive</code>' attribute was set.
     *
     * @return true if the '<code>usageInDrive</code>' attribute was set.
     */
    bool has_usage_in_drive() const {
      return Storage().isMember("usageInDrive");
    }

    /**
     * Clears the '<code>usageInDrive</code>' attribute.
     */
    void clear_usage_in_drive() {
      MutableStorage()->removeMember("usageInDrive");
    }


    /**
     * Get the value of the '<code>usageInDrive</code>' attribute.
     */
    int64 get_usage_in_drive() const {
      const Json::Value& storage = Storage("usageInDrive");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>usageInDrive</code>' attribute.
     *
     * The usage by all files in Google Drive.
     *
     * @param[in] value The new value.
     */
    void set_usage_in_drive(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("usageInDrive"));
    }

    /**
     * Determine if the '<code>usageInDriveTrash</code>' attribute was set.
     *
     * @return true if the '<code>usageInDriveTrash</code>' attribute was set.
     */
    bool has_usage_in_drive_trash() const {
      return Storage().isMember("usageInDriveTrash");
    }

    /**
     * Clears the '<code>usageInDriveTrash</code>' attribute.
     */
    void clear_usage_in_drive_trash() {
      MutableStorage()->removeMember("usageInDriveTrash");
    }


    /**
     * Get the value of the '<code>usageInDriveTrash</code>' attribute.
     */
    int64 get_usage_in_drive_trash() const {
      const Json::Value& storage = Storage("usageInDriveTrash");
      return client::JsonValueToCppValueHelper<int64 >(storage);
    }

    /**
     * Change the '<code>usageInDriveTrash</code>' attribute.
     *
     * The usage by trashed files in Google Drive.
     *
     * @param[in] value The new value.
     */
    void set_usage_in_drive_trash(int64 value) {
      client::SetJsonValueFromCppValueHelper<int64 >(
        value, MutableStorage("usageInDriveTrash"));
    }

   private:
    void operator=(const AboutStorageQuota&);
  };  // AboutStorageQuota
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static About* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit About(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit About(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~About();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::About</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::About");
  }

  /**
   * Determine if the '<code>appInstalled</code>' attribute was set.
   *
   * @return true if the '<code>appInstalled</code>' attribute was set.
   */
  bool has_app_installed() const {
    return Storage().isMember("appInstalled");
  }

  /**
   * Clears the '<code>appInstalled</code>' attribute.
   */
  void clear_app_installed() {
    MutableStorage()->removeMember("appInstalled");
  }


  /**
   * Get the value of the '<code>appInstalled</code>' attribute.
   */
  bool get_app_installed() const {
    const Json::Value& storage = Storage("appInstalled");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>appInstalled</code>' attribute.
   *
   * Whether the user has installed the requesting app.
   *
   * @param[in] value The new value.
   */
  void set_app_installed(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("appInstalled"));
  }

  /**
   * Determine if the '<code>exportFormats</code>' attribute was set.
   *
   * @return true if the '<code>exportFormats</code>' attribute was set.
   */
  bool has_export_formats() const {
    return Storage().isMember("exportFormats");
  }

  /**
   * Clears the '<code>exportFormats</code>' attribute.
   */
  void clear_export_formats() {
    MutableStorage()->removeMember("exportFormats");
  }


  /**
   * Get a reference to the value of the '<code>exportFormats</code>' attribute.
   */
  const client::JsonCppAssociativeArray<client::JsonCppArray<string > > get_export_formats() const {
     const Json::Value& storage = Storage("exportFormats");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<client::JsonCppArray<string > > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>exportFormats</code>'
   * property.
   *
   * A map of source MIME type to possible targets for all supported exports.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<client::JsonCppArray<string > > mutable_exportFormats() {
    Json::Value* storage = MutableStorage("exportFormats");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<client::JsonCppArray<string > > >(storage);
  }

  /**
   * Determine if the '<code>folderColorPalette</code>' attribute was set.
   *
   * @return true if the '<code>folderColorPalette</code>' attribute was set.
   */
  bool has_folder_color_palette() const {
    return Storage().isMember("folderColorPalette");
  }

  /**
   * Clears the '<code>folderColorPalette</code>' attribute.
   */
  void clear_folder_color_palette() {
    MutableStorage()->removeMember("folderColorPalette");
  }


  /**
   * Get a reference to the value of the '<code>folderColorPalette</code>'
   * attribute.
   */
  const client::JsonCppArray<string > get_folder_color_palette() const {
     const Json::Value& storage = Storage("folderColorPalette");
    return client::JsonValueToCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the
   * '<code>folderColorPalette</code>' property.
   *
   * The currently supported folder colors as RGB hex strings.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppArray<string > mutable_folderColorPalette() {
    Json::Value* storage = MutableStorage("folderColorPalette");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppArray<string > >(storage);
  }

  /**
   * Determine if the '<code>importFormats</code>' attribute was set.
   *
   * @return true if the '<code>importFormats</code>' attribute was set.
   */
  bool has_import_formats() const {
    return Storage().isMember("importFormats");
  }

  /**
   * Clears the '<code>importFormats</code>' attribute.
   */
  void clear_import_formats() {
    MutableStorage()->removeMember("importFormats");
  }


  /**
   * Get a reference to the value of the '<code>importFormats</code>' attribute.
   */
  const client::JsonCppAssociativeArray<client::JsonCppArray<string > > get_import_formats() const {
     const Json::Value& storage = Storage("importFormats");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<client::JsonCppArray<string > > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>importFormats</code>'
   * property.
   *
   * A map of source MIME type to possible targets for all supported imports.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<client::JsonCppArray<string > > mutable_importFormats() {
    Json::Value* storage = MutableStorage("importFormats");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<client::JsonCppArray<string > > >(storage);
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#about.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>maxImportSizes</code>' attribute was set.
   *
   * @return true if the '<code>maxImportSizes</code>' attribute was set.
   */
  bool has_max_import_sizes() const {
    return Storage().isMember("maxImportSizes");
  }

  /**
   * Clears the '<code>maxImportSizes</code>' attribute.
   */
  void clear_max_import_sizes() {
    MutableStorage()->removeMember("maxImportSizes");
  }


  /**
   * Get a reference to the value of the '<code>maxImportSizes</code>'
   * attribute.
   */
  const client::JsonCppAssociativeArray<int64 > get_max_import_sizes() const {
     const Json::Value& storage = Storage("maxImportSizes");
    return client::JsonValueToCppValueHelper<client::JsonCppAssociativeArray<int64 > >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>maxImportSizes</code>'
   * property.
   *
   * A map of maximum import sizes by MIME type, in bytes.
   *
   * @return The result can be modified to change the attribute value.
   */
  client::JsonCppAssociativeArray<int64 > mutable_maxImportSizes() {
    Json::Value* storage = MutableStorage("maxImportSizes");
    return client::JsonValueToMutableCppValueHelper<client::JsonCppAssociativeArray<int64 > >(storage);
  }

  /**
   * Determine if the '<code>maxUploadSize</code>' attribute was set.
   *
   * @return true if the '<code>maxUploadSize</code>' attribute was set.
   */
  bool has_max_upload_size() const {
    return Storage().isMember("maxUploadSize");
  }

  /**
   * Clears the '<code>maxUploadSize</code>' attribute.
   */
  void clear_max_upload_size() {
    MutableStorage()->removeMember("maxUploadSize");
  }


  /**
   * Get the value of the '<code>maxUploadSize</code>' attribute.
   */
  int64 get_max_upload_size() const {
    const Json::Value& storage = Storage("maxUploadSize");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>maxUploadSize</code>' attribute.
   *
   * The maximum upload size in bytes.
   *
   * @param[in] value The new value.
   */
  void set_max_upload_size(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("maxUploadSize"));
  }

  /**
   * Determine if the '<code>storageQuota</code>' attribute was set.
   *
   * @return true if the '<code>storageQuota</code>' attribute was set.
   */
  bool has_storage_quota() const {
    return Storage().isMember("storageQuota");
  }

  /**
   * Clears the '<code>storageQuota</code>' attribute.
   */
  void clear_storage_quota() {
    MutableStorage()->removeMember("storageQuota");
  }


  /**
   * Get a reference to the value of the '<code>storageQuota</code>' attribute.
   */
  const AboutStorageQuota get_storage_quota() const {
     const Json::Value& storage = Storage("storageQuota");
    return client::JsonValueToCppValueHelper<AboutStorageQuota >(storage);
  }

  /**
   * Gets a reference to a mutable value of the '<code>storageQuota</code>'
   * property.
   *
   * The user's storage quota limits and usage. All fields are measured in
   * bytes.
   *
   * @return The result can be modified to change the attribute value.
   */
  AboutStorageQuota mutable_storageQuota() {
    Json::Value* storage = MutableStorage("storageQuota");
    return client::JsonValueToMutableCppValueHelper<AboutStorageQuota >(storage);
  }

  /**
   * Determine if the '<code>user</code>' attribute was set.
   *
   * @return true if the '<code>user</code>' attribute was set.
   */
  bool has_user() const {
    return Storage().isMember("user");
  }

  /**
   * Clears the '<code>user</code>' attribute.
   */
  void clear_user() {
    MutableStorage()->removeMember("user");
  }


  /**
   * Get a reference to the value of the '<code>user</code>' attribute.
   */
  const User get_user() const;

  /**
   * Gets a reference to a mutable value of the '<code>user</code>' property.
   *
   * The authenticated user.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_user();

 private:
  void operator=(const About&);
};  // About
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_ABOUT_H_
