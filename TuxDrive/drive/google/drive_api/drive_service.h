// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-04-08 17:16:44 UTC
//   on: 2016-04-28, 20:31:57 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_DRIVE_API_DRIVE_SERVICE_H_
#define  GOOGLE_DRIVE_API_DRIVE_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/drive_api/about.h"
#include "google/drive_api/change_list.h"
#include "google/drive_api/channel.h"
#include "google/drive_api/comment.h"
#include "google/drive_api/comment_list.h"
#include "google/drive_api/file.h"
#include "google/drive_api/file_list.h"
#include "google/drive_api/generated_ids.h"
#include "google/drive_api/permission.h"
#include "google/drive_api/permission_list.h"
#include "google/drive_api/reply.h"
#include "google/drive_api/reply_list.h"
#include "google/drive_api/revision.h"
#include "google/drive_api/revision_list.h"
#include "google/drive_api/start_page_token.h"


namespace google_drive_api {
using namespace googleapis;
/**
 * \mainpage
 *   Drive API Version v3
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/drive/'>Drive API</a>
 *      <tr><th>API Version<td>v3
 *      <tr><th>API Rev<td>22
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/drive/'>
 *              https://developers.google.com/drive/</a>
 *      <tr><th>Discovery Name<td>drive
 *      <tr><th>Generated At<td>2016-04-28 20:31:57 UTC
 *      <tr><th>C++ Generator<td>google-apis-code-generator
 *      <tr><th>Generator Version
 *          <td>1.5.1 / c++=0.1.4
 *      <tr><th>Generator Build<td>2016-04-08 17:16:44 UTC
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Drive API can be found at
 * <a href='https://developers.google.com/drive/'>https://developers.google.com/drive/</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class DriveService;

/**
 * Implements a common base method for all methods within the DriveService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class DriveServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  DriveServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~DriveServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }


  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }


  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const client::JsonCppData *content);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  DISALLOW_COPY_AND_ASSIGN(DriveServiceBaseRequest);
};



/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class AboutResource_GetMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  AboutResource_GetMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~AboutResource_GetMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      About* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  DISALLOW_COPY_AND_ASSIGN(AboutResource_GetMethod);
};



/**
 * Implements the getStartPageToken method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChangesResource_GetStartPageTokenMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  ChangesResource_GetStartPageTokenMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~ChangesResource_GetStartPageTokenMethod();

  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      StartPageToken* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  DISALLOW_COPY_AND_ASSIGN(ChangesResource_GetStartPageTokenMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChangesResource_ListMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] page_token The token for continuing a previous list request on
   * the next page. This should be set to the value of 'nextPageToken' from the
   * previous response or to the response from the getStartPageToken method.
   */
  ChangesResource_ListMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& page_token);

  /**
   * Standard destructor.
   */
  virtual ~ChangesResource_ListMethod();


    /**
     * Clears the '<code>includeRemoved</code>' attribute so it is no longer
     * set.
     */
    void clear_include_removed() {
      _have_include_removed_ = false;
      client::ClearCppValueHelper(&include_removed_);
    }


    /**
     * Gets the optional '<code>includeRemoved</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_removed() const { return include_removed_; }

    /**
     * Sets the '<code>includeRemoved</code>' attribute.
     *
     * @param[in] value Whether to include changes indicating that items have
     * left the view of the changes list, for example by deletion or lost
     * access.
     */
    void set_include_removed(bool value) {
      _have_include_removed_ = true;
      include_removed_ = value;
    }

    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value The maximum number of changes to return per page.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

    /**
     * Clears the '<code>restrictToMyDrive</code>' attribute so it is no longer
     * set.
     */
    void clear_restrict_to_my_drive() {
      _have_restrict_to_my_drive_ = false;
      client::ClearCppValueHelper(&restrict_to_my_drive_);
    }


    /**
     * Gets the optional '<code>restrictToMyDrive</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_restrict_to_my_drive() const { return restrict_to_my_drive_; }

    /**
     * Sets the '<code>restrictToMyDrive</code>' attribute.
     *
     * @param[in] value Whether to restrict the results to changes inside the My
     * Drive hierarchy. This omits changes to files such as those in the
     * Application Data folder or shared files which have not been added to My
     * Drive.
     */
    void set_restrict_to_my_drive(bool value) {
      _have_restrict_to_my_drive_ = true;
      restrict_to_my_drive_ = value;
    }

    /**
     * Clears the '<code>spaces</code>' attribute so it is no longer set.
     */
    void clear_spaces() {
      _have_spaces_ = false;
      client::ClearCppValueHelper(&spaces_);
    }


    /**
     * Gets the optional '<code>spaces</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_spaces() const { return spaces_; }

    /**
     * Gets a modifiable pointer to the optional <code>spaces</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_spaces() {
      _have_spaces_ = true;
      return &spaces_;
    }


    /**
     * Sets the '<code>spaces</code>' attribute.
     *
     * @param[in] value A comma-separated list of spaces to query within the
     * user corpus. Supported values are 'drive', 'appDataFolder' and 'photos'.
     */
    void set_spaces(const string& value) {
      _have_spaces_ = true;
      spaces_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ChangeList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string page_token_;
  bool include_removed_;
  int32 page_size_;
  bool restrict_to_my_drive_;
  string spaces_;
  bool _have_include_removed_ : 1;
  bool _have_page_size_ : 1;
  bool _have_restrict_to_my_drive_ : 1;
  bool _have_spaces_ : 1;
  DISALLOW_COPY_AND_ASSIGN(ChangesResource_ListMethod);
};

/**
 * Implements the watch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChangesResource_WatchMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] page_token The token for continuing a previous list request on
   * the next page. This should be set to the value of 'nextPageToken' from the
   * previous response or to the response from the getStartPageToken method.
   * @param[in] _content_ The data object to watch.
   */
  ChangesResource_WatchMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& page_token,
      const Channel& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ChangesResource_WatchMethod();


    /**
     * Clears the '<code>includeRemoved</code>' attribute so it is no longer
     * set.
     */
    void clear_include_removed() {
      _have_include_removed_ = false;
      client::ClearCppValueHelper(&include_removed_);
    }


    /**
     * Gets the optional '<code>includeRemoved</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_removed() const { return include_removed_; }

    /**
     * Sets the '<code>includeRemoved</code>' attribute.
     *
     * @param[in] value Whether to include changes indicating that items have
     * left the view of the changes list, for example by deletion or lost
     * access.
     */
    void set_include_removed(bool value) {
      _have_include_removed_ = true;
      include_removed_ = value;
    }

    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value The maximum number of changes to return per page.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

    /**
     * Clears the '<code>restrictToMyDrive</code>' attribute so it is no longer
     * set.
     */
    void clear_restrict_to_my_drive() {
      _have_restrict_to_my_drive_ = false;
      client::ClearCppValueHelper(&restrict_to_my_drive_);
    }


    /**
     * Gets the optional '<code>restrictToMyDrive</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_restrict_to_my_drive() const { return restrict_to_my_drive_; }

    /**
     * Sets the '<code>restrictToMyDrive</code>' attribute.
     *
     * @param[in] value Whether to restrict the results to changes inside the My
     * Drive hierarchy. This omits changes to files such as those in the
     * Application Data folder or shared files which have not been added to My
     * Drive.
     */
    void set_restrict_to_my_drive(bool value) {
      _have_restrict_to_my_drive_ = true;
      restrict_to_my_drive_ = value;
    }

    /**
     * Clears the '<code>spaces</code>' attribute so it is no longer set.
     */
    void clear_spaces() {
      _have_spaces_ = false;
      client::ClearCppValueHelper(&spaces_);
    }


    /**
     * Gets the optional '<code>spaces</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_spaces() const { return spaces_; }

    /**
     * Gets a modifiable pointer to the optional <code>spaces</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_spaces() {
      _have_spaces_ = true;
      return &spaces_;
    }


    /**
     * Sets the '<code>spaces</code>' attribute.
     *
     * @param[in] value A comma-separated list of spaces to query within the
     * user corpus. Supported values are 'drive', 'appDataFolder' and 'photos'.
     */
    void set_spaces(const string& value) {
      _have_spaces_ = true;
      spaces_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Channel* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string page_token_;
  bool include_removed_;
  int32 page_size_;
  bool restrict_to_my_drive_;
  string spaces_;
  bool _have_include_removed_ : 1;
  bool _have_page_size_ : 1;
  bool _have_restrict_to_my_drive_ : 1;
  bool _have_spaces_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChangesResource_WatchMethod);
};



/**
 * Implements the stop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class ChannelsResource_StopMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to stop.
   */
  ChannelsResource_StopMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const Channel& _content_);

  /**
   * Standard destructor.
   */
  virtual ~ChannelsResource_StopMethod();

 private:
  string _content_;
  DISALLOW_COPY_AND_ASSIGN(ChannelsResource_StopMethod);
};



/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class CommentsResource_CreateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] _content_ The data object to create.
   */
  CommentsResource_CreateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const Comment& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class CommentsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   */
  CommentsResource_DeleteMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string comment_id_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class CommentsResource_GetMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   */
  CommentsResource_GetMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_GetMethod();


    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }


    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value Whether to return deleted comments. Deleted comments
     * will not include their original content.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  bool include_deleted_;
  bool _have_include_deleted_ : 1;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class CommentsResource_ListMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   */
  CommentsResource_ListMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_ListMethod();


    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }


    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted comments. Deleted comments
     * will not include their original content.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value The maximum number of comments to return per page.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The token for continuing a previous list request on the
     * next page. This should be set to the value of 'nextPageToken' from the
     * previous response.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>startModifiedTime</code>' attribute so it is no longer
     * set.
     */
    void clear_start_modified_time() {
      _have_start_modified_time_ = false;
      client::ClearCppValueHelper(&start_modified_time_);
    }


    /**
     * Gets the optional '<code>startModifiedTime</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_start_modified_time() const { return start_modified_time_; }

    /**
     * Gets a modifiable pointer to the optional <code>startModifiedTime</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_startModifiedTime() {
      _have_start_modified_time_ = true;
      return &start_modified_time_;
    }


    /**
     * Sets the '<code>startModifiedTime</code>' attribute.
     *
     * @param[in] value The minimum value of 'modifiedTime' for the result
     * comments (RFC 3339 date-time).
     */
    void set_start_modified_time(const string& value) {
      _have_start_modified_time_ = true;
      start_modified_time_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      CommentList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  bool include_deleted_;
  int32 page_size_;
  string page_token_;
  string start_modified_time_;
  bool _have_include_deleted_ : 1;
  bool _have_page_size_ : 1;
  bool _have_page_token_ : 1;
  bool _have_start_modified_time_ : 1;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            CommentsResource_ListMethod,
            CommentList>
        CommentsResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class CommentsResource_UpdateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   * @param[in] _content_ The data object to update.
   */
  CommentsResource_UpdateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id,
      const Comment& _content_);

  /**
   * Standard destructor.
   */
  virtual ~CommentsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Comment* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(CommentsResource_UpdateMethod);
};



/**
 * Implements the copy method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.photos.readonly
 */
class FilesResource_CopyMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] _content_ The data object to copy.
   */
  FilesResource_CopyMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const File& _content_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_CopyMethod();


    /**
     * Clears the '<code>ignoreDefaultVisibility</code>' attribute so it is no
     * longer set.
     */
    void clear_ignore_default_visibility() {
      _have_ignore_default_visibility_ = false;
      client::ClearCppValueHelper(&ignore_default_visibility_);
    }


    /**
     * Gets the optional '<code>ignoreDefaultVisibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ignore_default_visibility() const { return ignore_default_visibility_; }

    /**
     * Sets the '<code>ignoreDefaultVisibility</code>' attribute.
     *
     * @param[in] value Whether to ignore the domain's default visibility
     * settings for the created file. Domain administrators can choose to make
     * all uploaded files visible to the domain by default; this parameter
     * bypasses that behavior for the request. Permissions are still inherited
     * from parent folders.
     */
    void set_ignore_default_visibility(bool value) {
      _have_ignore_default_visibility_ = true;
      ignore_default_visibility_ = value;
    }

    /**
     * Clears the '<code>keepRevisionForever</code>' attribute so it is no
     * longer set.
     */
    void clear_keep_revision_forever() {
      _have_keep_revision_forever_ = false;
      client::ClearCppValueHelper(&keep_revision_forever_);
    }


    /**
     * Gets the optional '<code>keepRevisionForever</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_keep_revision_forever() const { return keep_revision_forever_; }

    /**
     * Sets the '<code>keepRevisionForever</code>' attribute.
     *
     * @param[in] value Whether to set the 'keepForever' field in the new head
     * revision. This is only applicable to files with binary content in Drive.
     */
    void set_keep_revision_forever(bool value) {
      _have_keep_revision_forever_ = true;
      keep_revision_forever_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }


    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value A language hint for OCR processing during image import
     * (ISO 639-1 code).
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  bool ignore_default_visibility_;
  bool keep_revision_forever_;
  string ocr_language_;
  bool _have_ignore_default_visibility_ : 1;
  bool _have_keep_revision_forever_ : 1;
  bool _have_ocr_language_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_CopyMethod);
};

/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_CreateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _content_ The data object to create.
   */
  FilesResource_CreateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] _metadata_ The metadata object to create. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to create. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  FilesResource_CreateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const File* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_CreateMethod();


    /**
     * Clears the '<code>ignoreDefaultVisibility</code>' attribute so it is no
     * longer set.
     */
    void clear_ignore_default_visibility() {
      _have_ignore_default_visibility_ = false;
      client::ClearCppValueHelper(&ignore_default_visibility_);
    }


    /**
     * Gets the optional '<code>ignoreDefaultVisibility</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_ignore_default_visibility() const { return ignore_default_visibility_; }

    /**
     * Sets the '<code>ignoreDefaultVisibility</code>' attribute.
     *
     * @param[in] value Whether to ignore the domain's default visibility
     * settings for the created file. Domain administrators can choose to make
     * all uploaded files visible to the domain by default; this parameter
     * bypasses that behavior for the request. Permissions are still inherited
     * from parent folders.
     */
    void set_ignore_default_visibility(bool value) {
      _have_ignore_default_visibility_ = true;
      ignore_default_visibility_ = value;
    }

    /**
     * Clears the '<code>keepRevisionForever</code>' attribute so it is no
     * longer set.
     */
    void clear_keep_revision_forever() {
      _have_keep_revision_forever_ = false;
      client::ClearCppValueHelper(&keep_revision_forever_);
    }


    /**
     * Gets the optional '<code>keepRevisionForever</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_keep_revision_forever() const { return keep_revision_forever_; }

    /**
     * Sets the '<code>keepRevisionForever</code>' attribute.
     *
     * @param[in] value Whether to set the 'keepForever' field in the new head
     * revision. This is only applicable to files with binary content in Drive.
     */
    void set_keep_revision_forever(bool value) {
      _have_keep_revision_forever_ = true;
      keep_revision_forever_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }


    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value A language hint for OCR processing during image import
     * (ISO 639-1 code).
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }



    /**
     * Clears the '<code>useContentAsIndexableText</code>' attribute so it is no
     * longer set.
     */
    void clear_use_content_as_indexable_text() {
      _have_use_content_as_indexable_text_ = false;
      client::ClearCppValueHelper(&use_content_as_indexable_text_);
    }


    /**
     * Gets the optional '<code>useContentAsIndexableText</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_use_content_as_indexable_text() const { return use_content_as_indexable_text_; }

    /**
     * Sets the '<code>useContentAsIndexableText</code>' attribute.
     *
     * @param[in] value Whether to use the uploaded content as indexable text.
     */
    void set_use_content_as_indexable_text(bool value) {
      _have_use_content_as_indexable_text_ = true;
      use_content_as_indexable_text_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  bool ignore_default_visibility_;
  bool keep_revision_forever_;
  string ocr_language_;
  bool use_content_as_indexable_text_;
  bool _have_ignore_default_visibility_ : 1;
  bool _have_keep_revision_forever_ : 1;
  bool _have_ocr_language_ : 1;
  bool _have_use_content_as_indexable_text_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_DeleteMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   */
  FilesResource_DeleteMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_DeleteMethod);
};

/**
 * Implements the emptyTrash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 */
class FilesResource_EmptyTrashMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  FilesResource_EmptyTrashMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_EmptyTrashMethod();

 private:
  DISALLOW_COPY_AND_ASSIGN(FilesResource_EmptyTrashMethod);
};

/**
 * Implements the export method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_ExportMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] mime_type The MIME type of the format requested for this export.
   */
  FilesResource_ExportMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& mime_type);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_ExportMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  string mime_type_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_ExportMethod);
};

/**
 * Implements the generateIds method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class FilesResource_GenerateIdsMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  FilesResource_GenerateIdsMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_GenerateIdsMethod();


    /**
     * Clears the '<code>count</code>' attribute so it is no longer set.
     */
    void clear_count() {
      _have_count_ = false;
      client::ClearCppValueHelper(&count_);
    }


    /**
     * Gets the optional '<code>count</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_count() const { return count_; }

    /**
     * Sets the '<code>count</code>' attribute.
     *
     * @param[in] value The number of IDs to return.
     */
    void set_count(int32 value) {
      _have_count_ = true;
      count_ = value;
    }

    /**
     * Clears the '<code>space</code>' attribute so it is no longer set.
     */
    void clear_space() {
      _have_space_ = false;
      client::ClearCppValueHelper(&space_);
    }


    /**
     * Gets the optional '<code>space</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_space() const { return space_; }

    /**
     * Gets a modifiable pointer to the optional <code>space</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_space() {
      _have_space_ = true;
      return &space_;
    }


    /**
     * Sets the '<code>space</code>' attribute.
     *
     * @param[in] value The space in which the IDs can be used to create new
     * files. Supported values are 'drive' and 'appDataFolder'.
     */
    void set_space(const string& value) {
      _have_space_ = true;
      space_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      GeneratedIds* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  int32 count_;
  string space_;
  bool _have_count_ : 1;
  bool _have_space_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_GenerateIdsMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_GetMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   */
  FilesResource_GetMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_GetMethod();


    /**
     * Clears the '<code>acknowledgeAbuse</code>' attribute so it is no longer
     * set.
     */
    void clear_acknowledge_abuse() {
      _have_acknowledge_abuse_ = false;
      client::ClearCppValueHelper(&acknowledge_abuse_);
    }


    /**
     * Gets the optional '<code>acknowledgeAbuse</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_acknowledge_abuse() const { return acknowledge_abuse_; }

    /**
     * Sets the '<code>acknowledgeAbuse</code>' attribute.
     *
     * @param[in] value Whether the user is acknowledging the risk of
     * downloading known malware or other abusive files. This is only applicable
     * when alt=media.
     */
    void set_acknowledge_abuse(bool value) {
      _have_acknowledge_abuse_ = true;
      acknowledge_abuse_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  bool acknowledge_abuse_;
  bool _have_acknowledge_abuse_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_ListMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   */
  FilesResource_ListMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_ListMethod();


    /**
     * Clears the '<code>corpus</code>' attribute so it is no longer set.
     */
    void clear_corpus() {
      _have_corpus_ = false;
      client::ClearCppValueHelper(&corpus_);
    }


    /**
     * Gets the optional '<code>corpus</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_corpus() const { return corpus_; }

    /**
     * Gets a modifiable pointer to the optional <code>corpus</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_corpus() {
      _have_corpus_ = true;
      return &corpus_;
    }


    /**
     * Sets the '<code>corpus</code>' attribute.
     *
     * @param[in] value The source of files to list.
     */
    void set_corpus(const string& value) {
      _have_corpus_ = true;
      corpus_ = value;
    }



    /**
     * Clears the '<code>orderBy</code>' attribute so it is no longer set.
     */
    void clear_order_by() {
      _have_order_by_ = false;
      client::ClearCppValueHelper(&order_by_);
    }


    /**
     * Gets the optional '<code>orderBy</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_order_by() const { return order_by_; }

    /**
     * Gets a modifiable pointer to the optional <code>orderBy</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_orderBy() {
      _have_order_by_ = true;
      return &order_by_;
    }


    /**
     * Sets the '<code>orderBy</code>' attribute.
     *
     * @param[in] value A comma-separated list of sort keys. Valid keys are
     * 'createdTime', 'folder', 'modifiedByMeTime', 'modifiedTime', 'name',
     * 'quotaBytesUsed', 'recency', 'sharedWithMeTime', 'starred', and
     * 'viewedByMeTime'. Each key sorts ascending by default, but may be
     * reversed with the 'desc' modifier. Example usage:
     * ?orderBy=folder,modifiedTime desc,name. Please note that there is a
     * current limitation for users with approximately one million files in
     * which the requested sort order is ignored.
     */
    void set_order_by(const string& value) {
      _have_order_by_ = true;
      order_by_ = value;
    }



    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value The maximum number of files to return per page.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The token for continuing a previous list request on the
     * next page. This should be set to the value of 'nextPageToken' from the
     * previous response.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value A query for filtering the file results. See the "Search
     * for Files" guide for supported syntax.
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }



    /**
     * Clears the '<code>spaces</code>' attribute so it is no longer set.
     */
    void clear_spaces() {
      _have_spaces_ = false;
      client::ClearCppValueHelper(&spaces_);
    }


    /**
     * Gets the optional '<code>spaces</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_spaces() const { return spaces_; }

    /**
     * Gets a modifiable pointer to the optional <code>spaces</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_spaces() {
      _have_spaces_ = true;
      return &spaces_;
    }


    /**
     * Sets the '<code>spaces</code>' attribute.
     *
     * @param[in] value A comma-separated list of spaces to query within the
     * corpus. Supported values are 'drive', 'appDataFolder' and 'photos'.
     */
    void set_spaces(const string& value) {
      _have_spaces_ = true;
      spaces_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      FileList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string corpus_;
  string order_by_;
  int32 page_size_;
  string page_token_;
  string q_;
  string spaces_;
  bool _have_corpus_ : 1;
  bool _have_order_by_ : 1;
  bool _have_page_size_ : 1;
  bool _have_page_token_ : 1;
  bool _have_q_ : 1;
  bool _have_spaces_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            FilesResource_ListMethod,
            FileList>
        FilesResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.scripts
 */
class FilesResource_UpdateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   *
   * @param[in] _content_ The data object to update.
   */
  FilesResource_UpdateMethod(
        const DriveService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] _metadata_ The metadata object to update. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to update. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  FilesResource_UpdateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const File* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_UpdateMethod();


    /**
     * Clears the '<code>addParents</code>' attribute so it is no longer set.
     */
    void clear_add_parents() {
      _have_add_parents_ = false;
      client::ClearCppValueHelper(&add_parents_);
    }


    /**
     * Gets the optional '<code>addParents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_add_parents() const { return add_parents_; }

    /**
     * Gets a modifiable pointer to the optional <code>addParents</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_addParents() {
      _have_add_parents_ = true;
      return &add_parents_;
    }


    /**
     * Sets the '<code>addParents</code>' attribute.
     *
     * @param[in] value A comma-separated list of parent IDs to add.
     */
    void set_add_parents(const string& value) {
      _have_add_parents_ = true;
      add_parents_ = value;
    }



    /**
     * Clears the '<code>keepRevisionForever</code>' attribute so it is no
     * longer set.
     */
    void clear_keep_revision_forever() {
      _have_keep_revision_forever_ = false;
      client::ClearCppValueHelper(&keep_revision_forever_);
    }


    /**
     * Gets the optional '<code>keepRevisionForever</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_keep_revision_forever() const { return keep_revision_forever_; }

    /**
     * Sets the '<code>keepRevisionForever</code>' attribute.
     *
     * @param[in] value Whether to set the 'keepForever' field in the new head
     * revision. This is only applicable to files with binary content in Drive.
     */
    void set_keep_revision_forever(bool value) {
      _have_keep_revision_forever_ = true;
      keep_revision_forever_ = value;
    }

    /**
     * Clears the '<code>ocrLanguage</code>' attribute so it is no longer set.
     */
    void clear_ocr_language() {
      _have_ocr_language_ = false;
      client::ClearCppValueHelper(&ocr_language_);
    }


    /**
     * Gets the optional '<code>ocrLanguage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_ocr_language() const { return ocr_language_; }

    /**
     * Gets a modifiable pointer to the optional <code>ocrLanguage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_ocrLanguage() {
      _have_ocr_language_ = true;
      return &ocr_language_;
    }


    /**
     * Sets the '<code>ocrLanguage</code>' attribute.
     *
     * @param[in] value A language hint for OCR processing during image import
     * (ISO 639-1 code).
     */
    void set_ocr_language(const string& value) {
      _have_ocr_language_ = true;
      ocr_language_ = value;
    }



    /**
     * Clears the '<code>removeParents</code>' attribute so it is no longer set.
     */
    void clear_remove_parents() {
      _have_remove_parents_ = false;
      client::ClearCppValueHelper(&remove_parents_);
    }


    /**
     * Gets the optional '<code>removeParents</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_remove_parents() const { return remove_parents_; }

    /**
     * Gets a modifiable pointer to the optional <code>removeParents</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_removeParents() {
      _have_remove_parents_ = true;
      return &remove_parents_;
    }


    /**
     * Sets the '<code>removeParents</code>' attribute.
     *
     * @param[in] value A comma-separated list of parent IDs to remove.
     */
    void set_remove_parents(const string& value) {
      _have_remove_parents_ = true;
      remove_parents_ = value;
    }



    /**
     * Clears the '<code>useContentAsIndexableText</code>' attribute so it is no
     * longer set.
     */
    void clear_use_content_as_indexable_text() {
      _have_use_content_as_indexable_text_ = false;
      client::ClearCppValueHelper(&use_content_as_indexable_text_);
    }


    /**
     * Gets the optional '<code>useContentAsIndexableText</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_use_content_as_indexable_text() const { return use_content_as_indexable_text_; }

    /**
     * Sets the '<code>useContentAsIndexableText</code>' attribute.
     *
     * @param[in] value Whether to use the uploaded content as indexable text.
     */
    void set_use_content_as_indexable_text(bool value) {
      _have_use_content_as_indexable_text_ = true;
      use_content_as_indexable_text_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      File* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string file_id_;
  string add_parents_;
  bool keep_revision_forever_;
  string ocr_language_;
  string remove_parents_;
  bool use_content_as_indexable_text_;
  bool _have_add_parents_ : 1;
  bool _have_keep_revision_forever_ : 1;
  bool _have_ocr_language_ : 1;
  bool _have_remove_parents_ : 1;
  bool _have_use_content_as_indexable_text_ : 1;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_UpdateMethod);
};

/**
 * Implements the watch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class FilesResource_WatchMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] _content_ The data object to watch.
   */
  FilesResource_WatchMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const Channel& _content_);

  /**
   * Standard destructor.
   */
  virtual ~FilesResource_WatchMethod();


    /**
     * Clears the '<code>acknowledgeAbuse</code>' attribute so it is no longer
     * set.
     */
    void clear_acknowledge_abuse() {
      _have_acknowledge_abuse_ = false;
      client::ClearCppValueHelper(&acknowledge_abuse_);
    }


    /**
     * Gets the optional '<code>acknowledgeAbuse</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_acknowledge_abuse() const { return acknowledge_abuse_; }

    /**
     * Sets the '<code>acknowledgeAbuse</code>' attribute.
     *
     * @param[in] value Whether the user is acknowledging the risk of
     * downloading known malware or other abusive files. This is only applicable
     * when alt=media.
     */
    void set_acknowledge_abuse(bool value) {
      _have_acknowledge_abuse_ = true;
      acknowledge_abuse_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Channel* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  bool acknowledge_abuse_;
  bool _have_acknowledge_abuse_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(FilesResource_WatchMethod);
};



/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_CreateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] _content_ The data object to create.
   */
  PermissionsResource_CreateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const Permission& _content_);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_CreateMethod();


    /**
     * Clears the '<code>emailMessage</code>' attribute so it is no longer set.
     */
    void clear_email_message() {
      _have_email_message_ = false;
      client::ClearCppValueHelper(&email_message_);
    }


    /**
     * Gets the optional '<code>emailMessage</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_email_message() const { return email_message_; }

    /**
     * Gets a modifiable pointer to the optional <code>emailMessage</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_emailMessage() {
      _have_email_message_ = true;
      return &email_message_;
    }


    /**
     * Sets the '<code>emailMessage</code>' attribute.
     *
     * @param[in] value A custom message to include in the notification email.
     */
    void set_email_message(const string& value) {
      _have_email_message_ = true;
      email_message_ = value;
    }



    /**
     * Clears the '<code>sendNotificationEmail</code>' attribute so it is no
     * longer set.
     */
    void clear_send_notification_email() {
      _have_send_notification_email_ = false;
      client::ClearCppValueHelper(&send_notification_email_);
    }


    /**
     * Gets the optional '<code>sendNotificationEmail</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_send_notification_email() const { return send_notification_email_; }

    /**
     * Sets the '<code>sendNotificationEmail</code>' attribute.
     *
     * @param[in] value Whether to send a notification email when sharing to
     * users or groups. This defaults to true for users and groups, and is not
     * allowed for other requests. It must not be disabled for ownership
     * transfers.
     */
    void set_send_notification_email(bool value) {
      _have_send_notification_email_ = true;
      send_notification_email_ = value;
    }

    /**
     * Clears the '<code>transferOwnership</code>' attribute so it is no longer
     * set.
     */
    void clear_transfer_ownership() {
      _have_transfer_ownership_ = false;
      client::ClearCppValueHelper(&transfer_ownership_);
    }


    /**
     * Gets the optional '<code>transferOwnership</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_transfer_ownership() const { return transfer_ownership_; }

    /**
     * Sets the '<code>transferOwnership</code>' attribute.
     *
     * @param[in] value Whether to transfer ownership to the specified user and
     * downgrade the current owner to a writer. This parameter is required as an
     * acknowledgement of the side effect.
     */
    void set_transfer_ownership(bool value) {
      _have_transfer_ownership_ = true;
      transfer_ownership_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string email_message_;
  bool send_notification_email_;
  bool transfer_ownership_;
  bool _have_email_message_ : 1;
  bool _have_send_notification_email_ : 1;
  bool _have_transfer_ownership_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] permission_id The ID of the permission.
   */
  PermissionsResource_DeleteMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& permission_id);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string permission_id_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PermissionsResource_GetMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] permission_id The ID of the permission.
   */
  PermissionsResource_GetMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& permission_id);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string permission_id_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class PermissionsResource_ListMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   */
  PermissionsResource_ListMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PermissionList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class PermissionsResource_UpdateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] permission_id The ID of the permission.
   * @param[in] _content_ The data object to update.
   */
  PermissionsResource_UpdateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& permission_id,
      const Permission& _content_);

  /**
   * Standard destructor.
   */
  virtual ~PermissionsResource_UpdateMethod();


    /**
     * Clears the '<code>transferOwnership</code>' attribute so it is no longer
     * set.
     */
    void clear_transfer_ownership() {
      _have_transfer_ownership_ = false;
      client::ClearCppValueHelper(&transfer_ownership_);
    }


    /**
     * Gets the optional '<code>transferOwnership</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_transfer_ownership() const { return transfer_ownership_; }

    /**
     * Sets the '<code>transferOwnership</code>' attribute.
     *
     * @param[in] value Whether to transfer ownership to the specified user and
     * downgrade the current owner to a writer. This parameter is required as an
     * acknowledgement of the side effect.
     */
    void set_transfer_ownership(bool value) {
      _have_transfer_ownership_ = true;
      transfer_ownership_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Permission* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string permission_id_;
  bool transfer_ownership_;
  bool _have_transfer_ownership_ : 1;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(PermissionsResource_UpdateMethod);
};



/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_CreateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   * @param[in] _content_ The data object to create.
   */
  RepliesResource_CreateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id,
      const Reply& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Reply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_DeleteMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   * @param[in] reply_id The ID of the reply.
   */
  RepliesResource_DeleteMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id,
      const StringPiece& reply_id);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string comment_id_;
  string reply_id_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class RepliesResource_GetMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   * @param[in] reply_id The ID of the reply.
   */
  RepliesResource_GetMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id,
      const StringPiece& reply_id);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_GetMethod();


    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }


    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value Whether to return deleted replies. Deleted replies will
     * not include their original content.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Reply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  string reply_id_;
  bool include_deleted_;
  bool _have_include_deleted_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.readonly
 */
class RepliesResource_ListMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   */
  RepliesResource_ListMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_ListMethod();


    /**
     * Clears the '<code>includeDeleted</code>' attribute so it is no longer
     * set.
     */
    void clear_include_deleted() {
      _have_include_deleted_ = false;
      client::ClearCppValueHelper(&include_deleted_);
    }


    /**
     * Gets the optional '<code>includeDeleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_deleted() const { return include_deleted_; }

    /**
     * Sets the '<code>includeDeleted</code>' attribute.
     *
     * @param[in] value Whether to include deleted replies. Deleted replies will
     * not include their original content.
     */
    void set_include_deleted(bool value) {
      _have_include_deleted_ = true;
      include_deleted_ = value;
    }

    /**
     * Clears the '<code>pageSize</code>' attribute so it is no longer set.
     */
    void clear_page_size() {
      _have_page_size_ = false;
      client::ClearCppValueHelper(&page_size_);
    }


    /**
     * Gets the optional '<code>pageSize</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    int32 get_page_size() const { return page_size_; }

    /**
     * Sets the '<code>pageSize</code>' attribute.
     *
     * @param[in] value The maximum number of replies to return per page.
     */
    void set_page_size(int32 value) {
      _have_page_size_ = true;
      page_size_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value The token for continuing a previous list request on the
     * next page. This should be set to the value of 'nextPageToken' from the
     * previous response.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ReplyList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  bool include_deleted_;
  int32 page_size_;
  string page_token_;
  bool _have_include_deleted_ : 1;
  bool _have_page_size_ : 1;
  bool _have_page_token_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            RepliesResource_ListMethod,
            ReplyList>
        RepliesResource_ListMethodPager;

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.file
 */
class RepliesResource_UpdateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] comment_id The ID of the comment.
   * @param[in] reply_id The ID of the reply.
   * @param[in] _content_ The data object to update.
   */
  RepliesResource_UpdateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& comment_id,
      const StringPiece& reply_id,
      const Reply& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RepliesResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Reply* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string comment_id_;
  string reply_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RepliesResource_UpdateMethod);
};



/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class RevisionsResource_DeleteMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] revision_id The ID of the revision.
   */
  RevisionsResource_DeleteMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& revision_id);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string file_id_;
  string revision_id_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class RevisionsResource_GetMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] revision_id The ID of the revision.
   */
  RevisionsResource_GetMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& revision_id);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_GetMethod();


    /**
     * Clears the '<code>acknowledgeAbuse</code>' attribute so it is no longer
     * set.
     */
    void clear_acknowledge_abuse() {
      _have_acknowledge_abuse_ = false;
      client::ClearCppValueHelper(&acknowledge_abuse_);
    }


    /**
     * Gets the optional '<code>acknowledgeAbuse</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_acknowledge_abuse() const { return acknowledge_abuse_; }

    /**
     * Sets the '<code>acknowledgeAbuse</code>' attribute.
     *
     * @param[in] value Whether the user is acknowledging the risk of
     * downloading known malware or other abusive files. This is only applicable
     * when alt=media.
     */
    void set_acknowledge_abuse(bool value) {
      _have_acknowledge_abuse_ = true;
      acknowledge_abuse_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Revision* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

  /**
   * Determine if the request should use Media Download for the response.
   *
   * @return true for media download, false otherwise.
   */
  bool get_use_media_download() const   {
    return DriveServiceBaseRequest::get_use_media_download();
  }

  /**
   * Sets whether Media Download should be used for the response data.
   *
   * @param[in] use true to use media download, false otherwise.
   */
  void set_use_media_download(bool use) {
    DriveServiceBaseRequest::set_use_media_download(use);
  }

 private:
  string file_id_;
  string revision_id_;
  bool acknowledge_abuse_;
  bool _have_acknowledge_abuse_ : 1;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 * https://www.googleapis.com/auth/drive.metadata
 * https://www.googleapis.com/auth/drive.metadata.readonly
 * https://www.googleapis.com/auth/drive.photos.readonly
 * https://www.googleapis.com/auth/drive.readonly
 */
class RevisionsResource_ListMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   */
  RevisionsResource_ListMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      RevisionList* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_ListMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/drive
 * https://www.googleapis.com/auth/drive.appdata
 * https://www.googleapis.com/auth/drive.file
 */
class RevisionsResource_UpdateMethod : public DriveServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] file_id The ID of the file.
   * @param[in] revision_id The ID of the revision.
   * @param[in] _content_ The data object to update.
   */
  RevisionsResource_UpdateMethod(
      const DriveService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& file_id,
      const StringPiece& revision_id,
      const Revision& _content_);

  /**
   * Standard destructor.
   */
  virtual ~RevisionsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Revision* data) {
    return DriveServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string file_id_;
  string revision_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(RevisionsResource_UpdateMethod);
};



/**
 * Service definition for DriveService (v3).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/drive/'>'https://developers.google.com/drive/</a>
 */
class DriveService : public client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class AboutResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit AboutResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~AboutResource() {}


    /**
     * Creates a new AboutResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    AboutResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(AboutResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ChangesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ChangesResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~ChangesResource() {}


    /**
     * Creates a new ChangesResource_GetStartPageTokenMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ChangesResource_GetStartPageTokenMethod* NewGetStartPageTokenMethod(
        client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a new ChangesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] page_token The token for continuing a previous list request on
     * the next page. This should be set to the value of 'nextPageToken' from
     * the previous response or to the response from the getStartPageToken
     * method.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ChangesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& page_token) const;

    /**
     * Creates a new ChangesResource_WatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] page_token The token for continuing a previous list request on
     * the next page. This should be set to the value of 'nextPageToken' from
     * the previous response or to the response from the getStartPageToken
     * method.
     * @param[in] _content_ The data object to watch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ChangesResource_WatchMethod* NewWatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& page_token,
        const Channel& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(ChangesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class ChannelsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit ChannelsResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~ChannelsResource() {}


    /**
     * Creates a new ChannelsResource_StopMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] _content_ The data object to stop.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    ChannelsResource_StopMethod* NewStopMethod(
        client::AuthorizationCredential* _credential_,
        const Channel& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(ChannelsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class CommentsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit CommentsResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~CommentsResource() {}


    /**
     * Creates a new CommentsResource_CreateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] _content_ The data object to create.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    CommentsResource_CreateMethod* NewCreateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Comment& _content_) const;

    /**
     * Creates a new CommentsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    CommentsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id) const;

    /**
     * Creates a new CommentsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    CommentsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id) const;

    /**
     * Creates a new CommentsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    CommentsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    CommentsResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a new CommentsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    CommentsResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const Comment& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(CommentsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class FilesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit FilesResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~FilesResource() {}


    /**
     * Creates a new FilesResource_CopyMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] _content_ The data object to copy.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_CopyMethod* NewCopyMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const File& _content_) const;


    /**
     * Creates a new FilesResource_CreateMethod instance.
     * @deprecated
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     *
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_CreateMethod* NewCreateMethod(
        client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a new FilesResource_CreateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] _metadata_ The metadata object to create. If this is NULL then
     * do not upload any metadata.
     * @param[in] _media_content_type_ The content type of the data in the
     * _media_content_reader_.
     * @param[in] _media_content_reader_ The media content to create. If
     * this is NULL then do not upload any media and ignore
     * _media_content_type_.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_CreateMethod* NewCreateMethod(
        client::AuthorizationCredential* _credential_,
        const File* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_) const;

    /**
     * Creates a new FilesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a new FilesResource_EmptyTrashMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_EmptyTrashMethod* NewEmptyTrashMethod(
        client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a new FilesResource_ExportMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] mime_type The MIME type of the format requested for this
     * export.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_ExportMethod* NewExportMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& mime_type) const;

    /**
     * Creates a new FilesResource_GenerateIdsMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_GenerateIdsMethod* NewGenerateIdsMethod(
        client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a new FilesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a new FilesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    FilesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_) const;


    /**
     * Creates a new FilesResource_UpdateMethod instance.
     * @deprecated
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     *
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a new FilesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] _metadata_ The metadata object to update. If this is NULL then
     * do not upload any metadata.
     * @param[in] _media_content_type_ The content type of the data in the
     * _media_content_reader_.
     * @param[in] _media_content_reader_ The media content to update. If
     * this is NULL then do not upload any media and ignore
     * _media_content_type_.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const File* _metadata_,
        const StringPiece& _media_content_type_,
        client::DataReader* _media_content_reader_) const;

    /**
     * Creates a new FilesResource_WatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] _content_ The data object to watch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    FilesResource_WatchMethod* NewWatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Channel& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(FilesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class PermissionsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit PermissionsResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~PermissionsResource() {}


    /**
     * Creates a new PermissionsResource_CreateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] _content_ The data object to create.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    PermissionsResource_CreateMethod* NewCreateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const Permission& _content_) const;

    /**
     * Creates a new PermissionsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] permission_id The ID of the permission.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    PermissionsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id) const;

    /**
     * Creates a new PermissionsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] permission_id The ID of the permission.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    PermissionsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id) const;

    /**
     * Creates a new PermissionsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    PermissionsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a new PermissionsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] permission_id The ID of the permission.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    PermissionsResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& permission_id,
        const Permission& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(PermissionsResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RepliesResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RepliesResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~RepliesResource() {}


    /**
     * Creates a new RepliesResource_CreateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @param[in] _content_ The data object to create.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RepliesResource_CreateMethod* NewCreateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const Reply& _content_) const;

    /**
     * Creates a new RepliesResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @param[in] reply_id The ID of the reply.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RepliesResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id) const;

    /**
     * Creates a new RepliesResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @param[in] reply_id The ID of the reply.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RepliesResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id) const;

    /**
     * Creates a new RepliesResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RepliesResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id) const;

    /**
     * Creates a pager for iterating over incremental result pages.
     * @param[in] _credential_  NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     *
     * @param[in] comment_id The ID of the comment.
     *
     *
     * @see googleapis::googleapis::ServiceRequestPager
     */
    RepliesResource_ListMethodPager* NewListMethodPager(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id) const;

    /**
     * Creates a new RepliesResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] comment_id The ID of the comment.
     * @param[in] reply_id The ID of the reply.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RepliesResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& comment_id,
        const StringPiece& reply_id,
        const Reply& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(RepliesResource);
  };

  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class RevisionsResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit RevisionsResource(DriveService* service);

    /**
     * Standard destructor.
     */
    ~RevisionsResource() {}


    /**
     * Creates a new RevisionsResource_DeleteMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] revision_id The ID of the revision.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RevisionsResource_DeleteMethod* NewDeleteMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id) const;

    /**
     * Creates a new RevisionsResource_GetMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] revision_id The ID of the revision.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RevisionsResource_GetMethod* NewGetMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id) const;

    /**
     * Creates a new RevisionsResource_ListMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RevisionsResource_ListMethod* NewListMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id) const;

    /**
     * Creates a new RevisionsResource_UpdateMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] file_id The ID of the file.
     * @param[in] revision_id The ID of the revision.
     * @param[in] _content_ The data object to update.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    RevisionsResource_UpdateMethod* NewUpdateMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& file_id,
        const StringPiece& revision_id,
        const Revision& _content_) const;

   private:
    DriveService* service_;

    DISALLOW_COPY_AND_ASSIGN(RevisionsResource);
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit DriveService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~DriveService();

  /**
   * Gets the  resource method factory.
   *
   * @return AboutResource for creating methods.
   */
  const AboutResource& get_about() const {
    return about_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChangesResource for creating methods.
   */
  const ChangesResource& get_changes() const {
    return changes_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return ChannelsResource for creating methods.
   */
  const ChannelsResource& get_channels() const {
    return channels_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return CommentsResource for creating methods.
   */
  const CommentsResource& get_comments() const {
    return comments_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return FilesResource for creating methods.
   */
  const FilesResource& get_files() const {
    return files_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return PermissionsResource for creating methods.
   */
  const PermissionsResource& get_permissions() const {
    return permissions_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RepliesResource for creating methods.
   */
  const RepliesResource& get_replies() const {
    return replies_;
  }


  /**
   * Gets the  resource method factory.
   *
   * @return RevisionsResource for creating methods.
   */
  const RevisionsResource& get_revisions() const {
    return revisions_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Drive API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the DriveService.
   */
  class SCOPES {
   public:
    /**
     * View and manage the files in your Google Drive.
     */
    static const char DRIVE[];

    /**
     * View and manage its own configuration data in your Google Drive.
     */
    static const char DRIVE_APPDATA[];

    /**
     * View and manage Google Drive files and folders that you have opened or
     * created with this app.
     */
    static const char DRIVE_FILE[];

    /**
     * View and manage metadata of files in your Google Drive.
     */
    static const char DRIVE_METADATA[];

    /**
     * View metadata for files in your Google Drive.
     */
    static const char DRIVE_METADATA_READONLY[];

    /**
     * View the photos, videos and albums in your Google Photos.
     */
    static const char DRIVE_PHOTOS_READONLY[];

    /**
     * View the files in your Google Drive.
     */
    static const char DRIVE_READONLY[];

    /**
     * Modify your Google Apps Script scripts' behavior.
     */
    static const char DRIVE_SCRIPTS[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  AboutResource about_;
  ChangesResource changes_;
  ChannelsResource channels_;
  CommentsResource comments_;
  FilesResource files_;
  PermissionsResource permissions_;
  RepliesResource replies_;
  RevisionsResource revisions_;

  DISALLOW_COPY_AND_ASSIGN(DriveService);
};


/**
 * @defgroup DataObject Drive API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Drive API Service
 *
 * The service classes contain information about accessing and using the
 * Drive API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Drive API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * DriveService to access the Drive API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_DRIVE_SERVICE_H_
