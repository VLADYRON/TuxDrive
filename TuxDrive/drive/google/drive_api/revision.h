// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-04-08 17:16:44 UTC
//   on: 2016-04-28, 20:31:57 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Drive API (drive/v3)
// Generated from:
//   Version: v3
//   Revision: 22
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_DRIVE_API_REVISION_H_
#define  GOOGLE_DRIVE_API_REVISION_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/client/util/date_time.h"
#include "googleapis/strings/stringpiece.h"

#include "google/drive_api/user.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_drive_api {
using namespace googleapis;

/**
 * The metadata for a revision to a file.
 *
 * @ingroup DataObject
 */
class Revision : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Revision* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Revision(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Revision(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Revision();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_drive_api::Revision</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_drive_api::Revision");
  }

  /**
   * Determine if the '<code>id</code>' attribute was set.
   *
   * @return true if the '<code>id</code>' attribute was set.
   */
  bool has_id() const {
    return Storage().isMember("id");
  }

  /**
   * Clears the '<code>id</code>' attribute.
   */
  void clear_id() {
    MutableStorage()->removeMember("id");
  }


  /**
   * Get the value of the '<code>id</code>' attribute.
   */
  const StringPiece get_id() const {
    const Json::Value& v = Storage("id");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>id</code>' attribute.
   *
   * The ID of the revision.
   *
   * @param[in] value The new value.
   */
  void set_id(const StringPiece& value) {
    *MutableStorage("id") = value.data();
  }

  /**
   * Determine if the '<code>keepForever</code>' attribute was set.
   *
   * @return true if the '<code>keepForever</code>' attribute was set.
   */
  bool has_keep_forever() const {
    return Storage().isMember("keepForever");
  }

  /**
   * Clears the '<code>keepForever</code>' attribute.
   */
  void clear_keep_forever() {
    MutableStorage()->removeMember("keepForever");
  }


  /**
   * Get the value of the '<code>keepForever</code>' attribute.
   */
  bool get_keep_forever() const {
    const Json::Value& storage = Storage("keepForever");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>keepForever</code>' attribute.
   *
   * Whether to keep this revision forever, even if it is no longer the head
   * revision. If not set, the revision will be automatically purged 30 days
   * after newer content is uploaded. This can be set on a maximum of 200
   * revisions for a file.
   * This field is only applicable to files with binary content in Drive.
   *
   * @param[in] value The new value.
   */
  void set_keep_forever(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("keepForever"));
  }

  /**
   * Determine if the '<code>kind</code>' attribute was set.
   *
   * @return true if the '<code>kind</code>' attribute was set.
   */
  bool has_kind() const {
    return Storage().isMember("kind");
  }

  /**
   * Clears the '<code>kind</code>' attribute.
   */
  void clear_kind() {
    MutableStorage()->removeMember("kind");
  }


  /**
   * Get the value of the '<code>kind</code>' attribute.
   */
  const StringPiece get_kind() const {
    const Json::Value& v = Storage("kind");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>kind</code>' attribute.
   *
   * This is always drive#revision.
   *
   * @param[in] value The new value.
   */
  void set_kind(const StringPiece& value) {
    *MutableStorage("kind") = value.data();
  }

  /**
   * Determine if the '<code>lastModifyingUser</code>' attribute was set.
   *
   * @return true if the '<code>lastModifyingUser</code>' attribute was set.
   */
  bool has_last_modifying_user() const {
    return Storage().isMember("lastModifyingUser");
  }

  /**
   * Clears the '<code>lastModifyingUser</code>' attribute.
   */
  void clear_last_modifying_user() {
    MutableStorage()->removeMember("lastModifyingUser");
  }


  /**
   * Get a reference to the value of the '<code>lastModifyingUser</code>'
   * attribute.
   */
  const User get_last_modifying_user() const;

  /**
   * Gets a reference to a mutable value of the '<code>lastModifyingUser</code>'
   * property.
   *
   * The last user to modify this revision.
   *
   * @return The result can be modified to change the attribute value.
   */
  User mutable_lastModifyingUser();

  /**
   * Determine if the '<code>md5Checksum</code>' attribute was set.
   *
   * @return true if the '<code>md5Checksum</code>' attribute was set.
   */
  bool has_md5_checksum() const {
    return Storage().isMember("md5Checksum");
  }

  /**
   * Clears the '<code>md5Checksum</code>' attribute.
   */
  void clear_md5_checksum() {
    MutableStorage()->removeMember("md5Checksum");
  }


  /**
   * Get the value of the '<code>md5Checksum</code>' attribute.
   */
  const StringPiece get_md5_checksum() const {
    const Json::Value& v = Storage("md5Checksum");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>md5Checksum</code>' attribute.
   *
   * The MD5 checksum of the revision's content. This is only applicable to
   * files with binary content in Drive.
   *
   * @param[in] value The new value.
   */
  void set_md5_checksum(const StringPiece& value) {
    *MutableStorage("md5Checksum") = value.data();
  }

  /**
   * Determine if the '<code>mimeType</code>' attribute was set.
   *
   * @return true if the '<code>mimeType</code>' attribute was set.
   */
  bool has_mime_type() const {
    return Storage().isMember("mimeType");
  }

  /**
   * Clears the '<code>mimeType</code>' attribute.
   */
  void clear_mime_type() {
    MutableStorage()->removeMember("mimeType");
  }


  /**
   * Get the value of the '<code>mimeType</code>' attribute.
   */
  const StringPiece get_mime_type() const {
    const Json::Value& v = Storage("mimeType");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>mimeType</code>' attribute.
   *
   * The MIME type of the revision.
   *
   * @param[in] value The new value.
   */
  void set_mime_type(const StringPiece& value) {
    *MutableStorage("mimeType") = value.data();
  }

  /**
   * Determine if the '<code>modifiedTime</code>' attribute was set.
   *
   * @return true if the '<code>modifiedTime</code>' attribute was set.
   */
  bool has_modified_time() const {
    return Storage().isMember("modifiedTime");
  }

  /**
   * Clears the '<code>modifiedTime</code>' attribute.
   */
  void clear_modified_time() {
    MutableStorage()->removeMember("modifiedTime");
  }


  /**
   * Get the value of the '<code>modifiedTime</code>' attribute.
   */
  client::DateTime get_modified_time() const {
    const Json::Value& storage = Storage("modifiedTime");
    return client::JsonValueToCppValueHelper<client::DateTime >(storage);
  }

  /**
   * Change the '<code>modifiedTime</code>' attribute.
   *
   * The last time the revision was modified (RFC 3339 date-time).
   *
   * @param[in] value The new value.
   */
  void set_modified_time(client::DateTime value) {
    client::SetJsonValueFromCppValueHelper<client::DateTime >(
      value, MutableStorage("modifiedTime"));
  }

  /**
   * Determine if the '<code>originalFilename</code>' attribute was set.
   *
   * @return true if the '<code>originalFilename</code>' attribute was set.
   */
  bool has_original_filename() const {
    return Storage().isMember("originalFilename");
  }

  /**
   * Clears the '<code>originalFilename</code>' attribute.
   */
  void clear_original_filename() {
    MutableStorage()->removeMember("originalFilename");
  }


  /**
   * Get the value of the '<code>originalFilename</code>' attribute.
   */
  const StringPiece get_original_filename() const {
    const Json::Value& v = Storage("originalFilename");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>originalFilename</code>' attribute.
   *
   * The original filename used to create this revision. This is only applicable
   * to files with binary content in Drive.
   *
   * @param[in] value The new value.
   */
  void set_original_filename(const StringPiece& value) {
    *MutableStorage("originalFilename") = value.data();
  }

  /**
   * Determine if the '<code>publishAuto</code>' attribute was set.
   *
   * @return true if the '<code>publishAuto</code>' attribute was set.
   */
  bool has_publish_auto() const {
    return Storage().isMember("publishAuto");
  }

  /**
   * Clears the '<code>publishAuto</code>' attribute.
   */
  void clear_publish_auto() {
    MutableStorage()->removeMember("publishAuto");
  }


  /**
   * Get the value of the '<code>publishAuto</code>' attribute.
   */
  bool get_publish_auto() const {
    const Json::Value& storage = Storage("publishAuto");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>publishAuto</code>' attribute.
   *
   * Whether subsequent revisions will be automatically republished. This is
   * only applicable to Google Docs.
   *
   * @param[in] value The new value.
   */
  void set_publish_auto(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("publishAuto"));
  }

  /**
   * Determine if the '<code>published</code>' attribute was set.
   *
   * @return true if the '<code>published</code>' attribute was set.
   */
  bool has_published() const {
    return Storage().isMember("published");
  }

  /**
   * Clears the '<code>published</code>' attribute.
   */
  void clear_published() {
    MutableStorage()->removeMember("published");
  }


  /**
   * Get the value of the '<code>published</code>' attribute.
   */
  bool get_published() const {
    const Json::Value& storage = Storage("published");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>published</code>' attribute.
   *
   * Whether this revision is published. This is only applicable to Google Docs.
   *
   * @param[in] value The new value.
   */
  void set_published(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("published"));
  }

  /**
   * Determine if the '<code>publishedOutsideDomain</code>' attribute was set.
   *
   * @return true if the '<code>publishedOutsideDomain</code>' attribute was
   * set.
   */
  bool has_published_outside_domain() const {
    return Storage().isMember("publishedOutsideDomain");
  }

  /**
   * Clears the '<code>publishedOutsideDomain</code>' attribute.
   */
  void clear_published_outside_domain() {
    MutableStorage()->removeMember("publishedOutsideDomain");
  }


  /**
   * Get the value of the '<code>publishedOutsideDomain</code>' attribute.
   */
  bool get_published_outside_domain() const {
    const Json::Value& storage = Storage("publishedOutsideDomain");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>publishedOutsideDomain</code>' attribute.
   *
   * Whether this revision is published outside the domain. This is only
   * applicable to Google Docs.
   *
   * @param[in] value The new value.
   */
  void set_published_outside_domain(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("publishedOutsideDomain"));
  }

  /**
   * Determine if the '<code>size</code>' attribute was set.
   *
   * @return true if the '<code>size</code>' attribute was set.
   */
  bool has_size() const {
    return Storage().isMember("size");
  }

  /**
   * Clears the '<code>size</code>' attribute.
   */
  void clear_size() {
    MutableStorage()->removeMember("size");
  }


  /**
   * Get the value of the '<code>size</code>' attribute.
   */
  int64 get_size() const {
    const Json::Value& storage = Storage("size");
    return client::JsonValueToCppValueHelper<int64 >(storage);
  }

  /**
   * Change the '<code>size</code>' attribute.
   *
   * The size of the revision's content in bytes. This is only applicable to
   * files with binary content in Drive.
   *
   * @param[in] value The new value.
   */
  void set_size(int64 value) {
    client::SetJsonValueFromCppValueHelper<int64 >(
      value, MutableStorage("size"));
  }

 private:
  void operator=(const Revision&);
};  // Revision
}  // namespace google_drive_api
#endif  // GOOGLE_DRIVE_API_REVISION_H_
